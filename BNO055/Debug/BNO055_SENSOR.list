
BNO055_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a88  08007a88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a90  08007a90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08007b08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08007b08  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf37  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d56  00000000  00000000  0003bfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0003ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00040600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002197a  00000000  00000000  00041db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfaf  00000000  00000000  00063732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e144c  00000000  00000000  0007f6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160b2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ac  00000000  00000000  00160b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080079b4 	.word	0x080079b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080079b4 	.word	0x080079b4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	; 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__gedf2>:
 800089c:	f04f 3cff 	mov.w	ip, #4294967295
 80008a0:	e006      	b.n	80008b0 <__cmpdf2+0x4>
 80008a2:	bf00      	nop

080008a4 <__ledf2>:
 80008a4:	f04f 0c01 	mov.w	ip, #1
 80008a8:	e002      	b.n	80008b0 <__cmpdf2+0x4>
 80008aa:	bf00      	nop

080008ac <__cmpdf2>:
 80008ac:	f04f 0c01 	mov.w	ip, #1
 80008b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c0:	bf18      	it	ne
 80008c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008c6:	d01b      	beq.n	8000900 <__cmpdf2+0x54>
 80008c8:	b001      	add	sp, #4
 80008ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ce:	bf0c      	ite	eq
 80008d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008d4:	ea91 0f03 	teqne	r1, r3
 80008d8:	bf02      	ittt	eq
 80008da:	ea90 0f02 	teqeq	r0, r2
 80008de:	2000      	moveq	r0, #0
 80008e0:	4770      	bxeq	lr
 80008e2:	f110 0f00 	cmn.w	r0, #0
 80008e6:	ea91 0f03 	teq	r1, r3
 80008ea:	bf58      	it	pl
 80008ec:	4299      	cmppl	r1, r3
 80008ee:	bf08      	it	eq
 80008f0:	4290      	cmpeq	r0, r2
 80008f2:	bf2c      	ite	cs
 80008f4:	17d8      	asrcs	r0, r3, #31
 80008f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008fa:	f040 0001 	orr.w	r0, r0, #1
 80008fe:	4770      	bx	lr
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d102      	bne.n	8000910 <__cmpdf2+0x64>
 800090a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800090e:	d107      	bne.n	8000920 <__cmpdf2+0x74>
 8000910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d1d6      	bne.n	80008c8 <__cmpdf2+0x1c>
 800091a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800091e:	d0d3      	beq.n	80008c8 <__cmpdf2+0x1c>
 8000920:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <__aeabi_cdrcmple>:
 8000928:	4684      	mov	ip, r0
 800092a:	4610      	mov	r0, r2
 800092c:	4662      	mov	r2, ip
 800092e:	468c      	mov	ip, r1
 8000930:	4619      	mov	r1, r3
 8000932:	4663      	mov	r3, ip
 8000934:	e000      	b.n	8000938 <__aeabi_cdcmpeq>
 8000936:	bf00      	nop

08000938 <__aeabi_cdcmpeq>:
 8000938:	b501      	push	{r0, lr}
 800093a:	f7ff ffb7 	bl	80008ac <__cmpdf2>
 800093e:	2800      	cmp	r0, #0
 8000940:	bf48      	it	mi
 8000942:	f110 0f00 	cmnmi.w	r0, #0
 8000946:	bd01      	pop	{r0, pc}

08000948 <__aeabi_dcmpeq>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff fff4 	bl	8000938 <__aeabi_cdcmpeq>
 8000950:	bf0c      	ite	eq
 8000952:	2001      	moveq	r0, #1
 8000954:	2000      	movne	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_dcmplt>:
 800095c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000960:	f7ff ffea 	bl	8000938 <__aeabi_cdcmpeq>
 8000964:	bf34      	ite	cc
 8000966:	2001      	movcc	r0, #1
 8000968:	2000      	movcs	r0, #0
 800096a:	f85d fb08 	ldr.w	pc, [sp], #8
 800096e:	bf00      	nop

08000970 <__aeabi_dcmple>:
 8000970:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000974:	f7ff ffe0 	bl	8000938 <__aeabi_cdcmpeq>
 8000978:	bf94      	ite	ls
 800097a:	2001      	movls	r0, #1
 800097c:	2000      	movhi	r0, #0
 800097e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000982:	bf00      	nop

08000984 <__aeabi_dcmpge>:
 8000984:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000988:	f7ff ffce 	bl	8000928 <__aeabi_cdrcmple>
 800098c:	bf94      	ite	ls
 800098e:	2001      	movls	r0, #1
 8000990:	2000      	movhi	r0, #0
 8000992:	f85d fb08 	ldr.w	pc, [sp], #8
 8000996:	bf00      	nop

08000998 <__aeabi_dcmpgt>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff ffc4 	bl	8000928 <__aeabi_cdrcmple>
 80009a0:	bf34      	ite	cc
 80009a2:	2001      	movcc	r0, #1
 80009a4:	2000      	movcs	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_d2iz>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d215      	bcs.n	80009e2 <__aeabi_d2iz+0x36>
 80009b6:	d511      	bpl.n	80009dc <__aeabi_d2iz+0x30>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d912      	bls.n	80009e8 <__aeabi_d2iz+0x3c>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d2:	fa23 f002 	lsr.w	r0, r3, r2
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d105      	bne.n	80009f4 <__aeabi_d2iz+0x48>
 80009e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b974 	b.w	8000cfc <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	4604      	mov	r4, r0
 8000a34:	468e      	mov	lr, r1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d14d      	bne.n	8000ad6 <__udivmoddi4+0xaa>
 8000a3a:	428a      	cmp	r2, r1
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	d969      	bls.n	8000b14 <__udivmoddi4+0xe8>
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	b152      	cbz	r2, 8000a5c <__udivmoddi4+0x30>
 8000a46:	fa01 f302 	lsl.w	r3, r1, r2
 8000a4a:	f1c2 0120 	rsb	r1, r2, #32
 8000a4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a56:	ea41 0e03 	orr.w	lr, r1, r3
 8000a5a:	4094      	lsls	r4, r2
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	0c21      	lsrs	r1, r4, #16
 8000a62:	fbbe f6f8 	udiv	r6, lr, r8
 8000a66:	fa1f f78c 	uxth.w	r7, ip
 8000a6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a72:	fb06 f107 	mul.w	r1, r6, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x64>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a82:	f080 811f 	bcs.w	8000cc4 <__udivmoddi4+0x298>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 811c 	bls.w	8000cc4 <__udivmoddi4+0x298>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a98:	fb08 3310 	mls	r3, r8, r0, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb00 f707 	mul.w	r7, r0, r7
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x92>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab0:	f080 810a 	bcs.w	8000cc8 <__udivmoddi4+0x29c>
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	f240 8107 	bls.w	8000cc8 <__udivmoddi4+0x29c>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	1be4      	subs	r4, r4, r7
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	b11d      	cbz	r5, 8000ad0 <__udivmoddi4+0xa4>
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	2300      	movs	r3, #0
 8000acc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0xc2>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	f000 80ef 	beq.w	8000cbe <__udivmoddi4+0x292>
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	fab3 f683 	clz	r6, r3
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d14a      	bne.n	8000b8c <__udivmoddi4+0x160>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xd4>
 8000afa:	4282      	cmp	r2, r0
 8000afc:	f200 80f9 	bhi.w	8000cf2 <__udivmoddi4+0x2c6>
 8000b00:	1a84      	subs	r4, r0, r2
 8000b02:	eb61 0303 	sbc.w	r3, r1, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	469e      	mov	lr, r3
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d0e0      	beq.n	8000ad0 <__udivmoddi4+0xa4>
 8000b0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b12:	e7dd      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000b14:	b902      	cbnz	r2, 8000b18 <__udivmoddi4+0xec>
 8000b16:	deff      	udf	#255	; 0xff
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	f040 8092 	bne.w	8000c46 <__udivmoddi4+0x21a>
 8000b22:	eba1 010c 	sub.w	r1, r1, ip
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2601      	movs	r6, #1
 8000b30:	0c20      	lsrs	r0, r4, #16
 8000b32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b36:	fb07 1113 	mls	r1, r7, r3, r1
 8000b3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b3e:	fb0e f003 	mul.w	r0, lr, r3
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x12c>
 8000b46:	eb1c 0101 	adds.w	r1, ip, r1
 8000b4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x12a>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2c0>
 8000b56:	4643      	mov	r3, r8
 8000b58:	1a09      	subs	r1, r1, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b60:	fb07 1110 	mls	r1, r7, r0, r1
 8000b64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x156>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x154>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b80:	4608      	mov	r0, r1
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b8a:	e79c      	b.n	8000ac6 <__udivmoddi4+0x9a>
 8000b8c:	f1c6 0720 	rsb	r7, r6, #32
 8000b90:	40b3      	lsls	r3, r6
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ba2:	431c      	orrs	r4, r3
 8000ba4:	40f9      	lsrs	r1, r7
 8000ba6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000baa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bb2:	0c20      	lsrs	r0, r4, #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bc4:	4288      	cmp	r0, r1
 8000bc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b8>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1a09      	subs	r1, r1, r0
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bec:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf8:	458e      	cmp	lr, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1e2>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c06:	458e      	cmp	lr, r1
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c12:	fba0 9402 	umull	r9, r4, r0, r2
 8000c16:	eba1 010e 	sub.w	r1, r1, lr
 8000c1a:	42a1      	cmp	r1, r4
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46a6      	mov	lr, r4
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x2a4>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x2a0>
 8000c24:	b15d      	cbz	r5, 8000c3e <__udivmoddi4+0x212>
 8000c26:	ebb3 0208 	subs.w	r2, r3, r8
 8000c2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c32:	fa22 f306 	lsr.w	r3, r2, r6
 8000c36:	40f1      	lsrs	r1, r6
 8000c38:	431f      	orrs	r7, r3
 8000c3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c3e:	2600      	movs	r6, #0
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	40d8      	lsrs	r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa21 f303 	lsr.w	r3, r1, r3
 8000c54:	4091      	lsls	r1, r2
 8000c56:	4301      	orrs	r1, r0
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c64:	fb07 3610 	mls	r6, r7, r0, r3
 8000c68:	0c0b      	lsrs	r3, r1, #16
 8000c6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c72:	429e      	cmp	r6, r3
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x260>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c84:	429e      	cmp	r6, r3
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	b289      	uxth	r1, r1
 8000c90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c94:	fb07 3316 	mls	r3, r7, r6, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x28a>
 8000ca4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2b0>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2b0>
 8000cb2:	3e02      	subs	r6, #2
 8000cb4:	4461      	add	r1, ip
 8000cb6:	1ac9      	subs	r1, r1, r3
 8000cb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0x104>
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e705      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e3      	b.n	8000a90 <__udivmoddi4+0x64>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6f8      	b.n	8000abe <__udivmoddi4+0x92>
 8000ccc:	454b      	cmp	r3, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f8>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f8>
 8000cdc:	4646      	mov	r6, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x28a>
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1e2>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x260>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b8>
 8000cec:	3b02      	subs	r3, #2
 8000cee:	4461      	add	r1, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x12c>
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e709      	b.n	8000b0a <__udivmoddi4+0xde>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x156>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ac      	sub	sp, #176	; 0xb0
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f001 f80c 	bl	8001d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f95d 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 fbe7 	bl	80014e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d12:	f000 fb99 	bl	8001448 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d16:	f000 fa1b 	bl	8001150 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d1a:	f000 f9a1 	bl	8001060 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d1e:	f000 fa95 	bl	800124c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d22:	f000 fb43 	bl	80013ac <MX_TIM2_Init>
  MX_SPI1_Init();
 8000d26:	f000 fa53 	bl	80011d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	int pwm_val = 500;
 8000d2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  	uint32_t adc1_val;
  	double adc1_value;

  	int xMag = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  	int yMag = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  	int zMag = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  	double xMagRef = 0;
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  	double yMagRef = 0;
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  	double zMagRef = 0;
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

  	int BNOxAccel = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  	int BNOyAccel = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  	int BNOzAccel = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	67fb      	str	r3, [r7, #124]	; 0x7c
  	int BNOxMag = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	67bb      	str	r3, [r7, #120]	; 0x78
  	int BNOyMag = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	677b      	str	r3, [r7, #116]	; 0x74
  	int BNOzMag = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	673b      	str	r3, [r7, #112]	; 0x70
  	int BNOxGyro = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	66fb      	str	r3, [r7, #108]	; 0x6c
  	int BNOyGyro = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	66bb      	str	r3, [r7, #104]	; 0x68
  	int BNOzGyro = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	667b      	str	r3, [r7, #100]	; 0x64
  	double BNOxAccelRef = 0;
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  	double BNOyAccelRef = 0;
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  	double BNOzAccelRef = 0;
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  	double BNOxMagRef = 0;
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  	double BNOyMagRef = 0;
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  	double BNOzMagRef = 0;
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  	double BNOxGyroRef = 0;
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  	double BNOyGyroRef = 0;
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2308 	strd	r2, r3, [r7, #32]
  	double BNOzGyroRef = 0;
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e9c7 2306 	strd	r2, r3, [r7, #24]

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4869      	ldr	r0, [pc, #420]	; (8000fa4 <main+0x2a4>)
 8000e00:	f004 fa48 	bl	8005294 <HAL_TIM_PWM_Start>
  	TIM1->CCR1 = 500;
 8000e04:	4b68      	ldr	r3, [pc, #416]	; (8000fa8 <main+0x2a8>)
 8000e06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_TIM_Base_Start(&htim2);
 8000e0c:	4867      	ldr	r0, [pc, #412]	; (8000fac <main+0x2ac>)
 8000e0e:	f004 f97d 	bl	800510c <HAL_TIM_Base_Start>


  	//IIS2_INIT();
  	BNO055_INIT();
 8000e12:	f000 fc79 	bl	8001708 <BNO055_INIT>

  	int counter = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  	int excessTime = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  	double currentTime = 0;
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	e9c7 2302 	strd	r2, r3, [r7, #8]

  	double IPROPI_res_value = 50;
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <main+0x2b0>)
 8000e30:	e9c7 2300 	strd	r2, r3, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BNO055_INIT();
 8000e34:	f000 fc68 	bl	8001708 <BNO055_INIT>
	  BNOxAccel = BNO055_GET_DATA(BNO055_ACCEL_X, 2);
 8000e38:	2102      	movs	r1, #2
 8000e3a:	2008      	movs	r0, #8
 8000e3c:	f000 fc78 	bl	8001730 <BNO055_GET_DATA>
 8000e40:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  BNOyAccel = BNO055_GET_DATA(BNO055_ACCEL_Y, 2);
 8000e44:	2102      	movs	r1, #2
 8000e46:	200a      	movs	r0, #10
 8000e48:	f000 fc72 	bl	8001730 <BNO055_GET_DATA>
 8000e4c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	  BNOzAccel = BNO055_GET_DATA(BNO055_ACCEL_Z, 2);
 8000e50:	2102      	movs	r1, #2
 8000e52:	200c      	movs	r0, #12
 8000e54:	f000 fc6c 	bl	8001730 <BNO055_GET_DATA>
 8000e58:	67f8      	str	r0, [r7, #124]	; 0x7c
	  BNOxMag = BNO055_GET_DATA(BNO055_MAG_X, 2);
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	200e      	movs	r0, #14
 8000e5e:	f000 fc67 	bl	8001730 <BNO055_GET_DATA>
 8000e62:	67b8      	str	r0, [r7, #120]	; 0x78
	  BNOyMag = BNO055_GET_DATA(BNO055_MAG_Y, 2);
 8000e64:	2102      	movs	r1, #2
 8000e66:	2010      	movs	r0, #16
 8000e68:	f000 fc62 	bl	8001730 <BNO055_GET_DATA>
 8000e6c:	6778      	str	r0, [r7, #116]	; 0x74
	  BNOzMag = BNO055_GET_DATA(BNO055_MAG_Z, 2);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	2012      	movs	r0, #18
 8000e72:	f000 fc5d 	bl	8001730 <BNO055_GET_DATA>
 8000e76:	6738      	str	r0, [r7, #112]	; 0x70
	  BNOxGyro = BNO055_GET_DATA(BNO055_GYRO_X, 2);
 8000e78:	2102      	movs	r1, #2
 8000e7a:	2014      	movs	r0, #20
 8000e7c:	f000 fc58 	bl	8001730 <BNO055_GET_DATA>
 8000e80:	66f8      	str	r0, [r7, #108]	; 0x6c
	  BNOyGyro = BNO055_GET_DATA(BNO055_GYRO_Y, 2);
 8000e82:	2102      	movs	r1, #2
 8000e84:	2016      	movs	r0, #22
 8000e86:	f000 fc53 	bl	8001730 <BNO055_GET_DATA>
 8000e8a:	66b8      	str	r0, [r7, #104]	; 0x68
	  BNOzGyro = BNO055_GET_DATA(BNO055_GYRO_Z, 2);
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	2018      	movs	r0, #24
 8000e90:	f000 fc4e 	bl	8001730 <BNO055_GET_DATA>
 8000e94:	6678      	str	r0, [r7, #100]	; 0x64
	  BNOxAccelRef = BNOxAccel;
 8000e96:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000e9a:	f7ff fc95 	bl	80007c8 <__aeabi_i2d>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  BNOyAccelRef = BNOyAccel;
 8000ea6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000eaa:	f7ff fc8d 	bl	80007c8 <__aeabi_i2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  BNOzAccelRef = BNOzAccel;
 8000eb6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000eb8:	f7ff fc86 	bl	80007c8 <__aeabi_i2d>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  BNOxMagRef = BNOxMag;
 8000ec4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000ec6:	f7ff fc7f 	bl	80007c8 <__aeabi_i2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  BNOyMagRef = BNOyMag;
 8000ed2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000ed4:	f7ff fc78 	bl	80007c8 <__aeabi_i2d>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	  BNOzMagRef = BNOzMag;
 8000ee0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000ee2:	f7ff fc71 	bl	80007c8 <__aeabi_i2d>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  BNOxGyroRef = BNOxGyro;
 8000eee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000ef0:	f7ff fc6a 	bl	80007c8 <__aeabi_i2d>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  BNOyGyroRef = BNOyGyro;
 8000efc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000efe:	f7ff fc63 	bl	80007c8 <__aeabi_i2d>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  BNOzGyroRef = BNOzGyro;
 8000f0a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000f0c:	f7ff fc5c 	bl	80007c8 <__aeabi_i2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  UART_PRINT_TEXT("Accelerometer: (");
 8000f18:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <main+0x2b4>)
 8000f1a:	f000 fbe1 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOxAccelRef);
 8000f1e:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8000f22:	f000 fb41 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(", ");
 8000f26:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <main+0x2b8>)
 8000f28:	f000 fbda 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOyAccelRef);
 8000f2c:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8000f30:	f000 fb3a 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(", ");
 8000f34:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <main+0x2b8>)
 8000f36:	f000 fbd3 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOzAccelRef);
 8000f3a:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8000f3e:	f000 fb33 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(" )\nMagnetometer: (");
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <main+0x2bc>)
 8000f44:	f000 fbcc 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOxMagRef);
 8000f48:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8000f4c:	f000 fb2c 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(", ");
 8000f50:	4819      	ldr	r0, [pc, #100]	; (8000fb8 <main+0x2b8>)
 8000f52:	f000 fbc5 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOyMagRef);
 8000f56:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8000f5a:	f000 fb25 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(", ");
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <main+0x2b8>)
 8000f60:	f000 fbbe 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOzMagRef);
 8000f64:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8000f68:	f000 fb1e 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(" )\nGyro: (");
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <main+0x2c0>)
 8000f6e:	f000 fbb7 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOxGyroRef);
 8000f72:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8000f76:	f000 fb17 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(", ");
 8000f7a:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <main+0x2b8>)
 8000f7c:	f000 fbb0 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOyGyroRef);
 8000f80:	ed97 0b08 	vldr	d0, [r7, #32]
 8000f84:	f000 fb10 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(", ");
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <main+0x2b8>)
 8000f8a:	f000 fba9 	bl	80016e0 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(BNOzGyroRef);
 8000f8e:	ed97 0b06 	vldr	d0, [r7, #24]
 8000f92:	f000 fb09 	bl	80015a8 <UART_PRINT_VAL>
	  UART_PRINT_TEXT(" )\n");
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <main+0x2c4>)
 8000f98:	f000 fba2 	bl	80016e0 <UART_PRINT_TEXT>
	  HAL_Delay(100);
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f000 ff31 	bl	8001e04 <HAL_Delay>
	  BNO055_INIT();
 8000fa2:	e747      	b.n	8000e34 <main+0x134>
 8000fa4:	200001a8 	.word	0x200001a8
 8000fa8:	40012c00 	.word	0x40012c00
 8000fac:	200001f4 	.word	0x200001f4
 8000fb0:	40490000 	.word	0x40490000
 8000fb4:	080079cc 	.word	0x080079cc
 8000fb8:	080079e0 	.word	0x080079e0
 8000fbc:	080079e4 	.word	0x080079e4
 8000fc0:	080079f8 	.word	0x080079f8
 8000fc4:	08007a04 	.word	0x08007a04

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	2238      	movs	r2, #56	; 0x38
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 f868 	bl	80070ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f002 ffc4 	bl	8003f78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffa:	2340      	movs	r3, #64	; 0x40
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001002:	2302      	movs	r3, #2
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001006:	2304      	movs	r3, #4
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800100a:	2355      	movs	r3, #85	; 0x55
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100e:	2302      	movs	r3, #2
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	4618      	mov	r0, r3
 8001020:	f003 f84e 	bl	80040c0 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800102a:	f000 fbe7 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2303      	movs	r3, #3
 8001034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2104      	movs	r1, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fb52 	bl	80046f0 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001052:	f000 fbd3 	bl	80017fc <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2220      	movs	r2, #32
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f006 f817 	bl	80070ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107e:	4b32      	ldr	r3, [pc, #200]	; (8001148 <MX_ADC1_Init+0xe8>)
 8001080:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001084:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <MX_ADC1_Init+0xe8>)
 8001088:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800108c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <MX_ADC1_Init+0xe8>)
 80010ea:	f001 f887 	bl	80021fc <HAL_ADC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010f4:	f000 fb82 	bl	80017fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_ADC1_Init+0xe8>)
 8001104:	f001 fe1a 	bl	8002d3c <HAL_ADCEx_MultiModeConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800110e:	f000 fb75 	bl	80017fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_ADC1_Init+0xec>)
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001116:	2306      	movs	r3, #6
 8001118:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111e:	237f      	movs	r3, #127	; 0x7f
 8001120:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001122:	2304      	movs	r3, #4
 8001124:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_ADC1_Init+0xe8>)
 8001130:	f001 f9ee 	bl	8002510 <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800113a:	f000 fb5f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000008c 	.word	0x2000008c
 800114c:	3ef08000 	.word	0x3ef08000

08001150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <MX_I2C1_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_I2C1_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <MX_I2C1_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <MX_I2C1_Init+0x74>)
 800118c:	f002 f8f8 	bl	8003380 <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 fb31 	bl	80017fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <MX_I2C1_Init+0x74>)
 800119e:	f002 fe53 	bl	8003e48 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fb28 	bl	80017fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_I2C1_Init+0x74>)
 80011b0:	f002 fe95 	bl	8003ede <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fb1f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000f8 	.word	0x200000f8
 80011c8:	40005400 	.word	0x40005400
 80011cc:	30a0a7fb 	.word	0x30a0a7fb

080011d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_SPI1_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_SPI1_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_SPI1_Init+0x74>)
 80011dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_SPI1_Init+0x74>)
 80011e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_SPI1_Init+0x74>)
 80011ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_SPI1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_SPI1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_SPI1_Init+0x74>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_SPI1_Init+0x74>)
 8001208:	2238      	movs	r2, #56	; 0x38
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_SPI1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_SPI1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_SPI1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_SPI1_Init+0x74>)
 8001220:	2207      	movs	r2, #7
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_SPI1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_SPI1_Init+0x74>)
 800122c:	2208      	movs	r2, #8
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_SPI1_Init+0x74>)
 8001232:	f003 fe69 	bl	8004f08 <HAL_SPI_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 fade 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000144 	.word	0x20000144
 8001248:	40013000 	.word	0x40013000

0800124c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09c      	sub	sp, #112	; 0x70
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2234      	movs	r2, #52	; 0x34
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f005 ff10 	bl	80070ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <MX_TIM1_Init+0x158>)
 800128e:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <MX_TIM1_Init+0x15c>)
 8001290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <MX_TIM1_Init+0x158>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <MX_TIM1_Init+0x158>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <MX_TIM1_Init+0x158>)
 80012a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <MX_TIM1_Init+0x158>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ac:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MX_TIM1_Init+0x158>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <MX_TIM1_Init+0x158>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b8:	483a      	ldr	r0, [pc, #232]	; (80013a4 <MX_TIM1_Init+0x158>)
 80012ba:	f003 fed0 	bl	800505e <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012c4:	f000 fa9a 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012d2:	4619      	mov	r1, r3
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <MX_TIM1_Init+0x158>)
 80012d6:	f004 f9f1 	bl	80056bc <HAL_TIM_ConfigClockSource>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012e0:	f000 fa8c 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e4:	482f      	ldr	r0, [pc, #188]	; (80013a4 <MX_TIM1_Init+0x158>)
 80012e6:	f003 ff73 	bl	80051d0 <HAL_TIM_PWM_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012f0:	f000 fa84 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001304:	4619      	mov	r1, r3
 8001306:	4827      	ldr	r0, [pc, #156]	; (80013a4 <MX_TIM1_Init+0x158>)
 8001308:	f004 ff1a 	bl	8006140 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001312:	f000 fa73 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	; 0x60
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	481a      	ldr	r0, [pc, #104]	; (80013a4 <MX_TIM1_Init+0x158>)
 800133c:	f004 f8aa 	bl	8005494 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001346:	f000 fa59 	bl	80017fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM1_Init+0x158>)
 8001388:	f004 ff5c 	bl	8006244 <HAL_TIMEx_ConfigBreakDeadTime>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001392:	f000 fa33 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM1_Init+0x158>)
 8001398:	f000 fb98 	bl	8001acc <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3770      	adds	r7, #112	; 0x70
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001a8 	.word	0x200001a8
 80013a8:	40012c00 	.word	0x40012c00

080013ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM2_Init+0x98>)
 80013cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM2_Init+0x98>)
 80013d4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM2_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM2_Init+0x98>)
 80013e2:	f04f 32ff 	mov.w	r2, #4294967295
 80013e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_TIM2_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM2_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_TIM2_Init+0x98>)
 80013f6:	f003 fe32 	bl	800505e <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 f9fc 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM2_Init+0x98>)
 8001412:	f004 f953 	bl	80056bc <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800141c:	f000 f9ee 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM2_Init+0x98>)
 800142e:	f004 fe87 	bl	8006140 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001438:	f000 f9e0 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001f4 	.word	0x200001f4

08001448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 800144e:	4a23      	ldr	r2, [pc, #140]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 8001492:	f004 ff77 	bl	8006384 <HAL_UART_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800149c:	f000 f9ae 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 80014a4:	f005 fd0e 	bl	8006ec4 <HAL_UARTEx_SetTxFifoThreshold>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014ae:	f000 f9a5 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 80014b6:	f005 fd43 	bl	8006f40 <HAL_UARTEx_SetRxFifoThreshold>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014c0:	f000 f99c 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_USART2_UART_Init+0x90>)
 80014c6:	f005 fcc4 	bl	8006e52 <HAL_UARTEx_DisableFifoMode>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f000 f994 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000240 	.word	0x20000240
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <MX_GPIO_Init+0xc0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <MX_GPIO_Init+0xc0>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <MX_GPIO_Init+0xc0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <MX_GPIO_Init+0xc0>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <MX_GPIO_Init+0xc0>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_GPIO_Init+0xc0>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f001 ff0e 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153a:	481a      	ldr	r0, [pc, #104]	; (80015a4 <MX_GPIO_Init+0xc4>)
 800153c:	f001 ff08 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001540:	2302      	movs	r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001556:	f001 fd79 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800155a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f001 fd69 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001594:	f001 fd5a 	bl	800304c <HAL_GPIO_Init>

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400

080015a8 <UART_PRINT_VAL>:

/* USER CODE BEGIN 4 */
void UART_PRINT_VAL(double value){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b096      	sub	sp, #88	; 0x58
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0b00 	vstr	d0, [r7]
    char total[50];
    char temp[10];
    if(value < 0){
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015be:	f7ff f9cd 	bl	800095c <__aeabi_dcmplt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <UART_PRINT_VAL+0x26>
       UART_PRINT_TEXT("-");
 80015c8:	4840      	ldr	r0, [pc, #256]	; (80016cc <UART_PRINT_VAL+0x124>)
 80015ca:	f000 f889 	bl	80016e0 <UART_PRINT_TEXT>
    }
    sprintf(total, "%i", abs((int)value));
 80015ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015d2:	f7ff f9eb 	bl	80009ac <__aeabi_d2iz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	493a      	ldr	r1, [pc, #232]	; (80016d0 <UART_PRINT_VAL+0x128>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 fd68 	bl	80070bc <siprintf>
    strcat(total, ".");
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe fe15 	bl	8000220 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	4413      	add	r3, r2
 8001600:	4934      	ldr	r1, [pc, #208]	; (80016d4 <UART_PRINT_VAL+0x12c>)
 8001602:	461a      	mov	r2, r3
 8001604:	460b      	mov	r3, r1
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	8013      	strh	r3, [r2, #0]
    double currentVal = (value - (int) value);
 800160a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800160e:	f7ff f9cd 	bl	80009ac <__aeabi_d2iz>
 8001612:	4603      	mov	r3, r0
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f8d7 	bl	80007c8 <__aeabi_i2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001622:	f7fe ff83 	bl	800052c <__aeabi_dsub>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 800162e:	2300      	movs	r3, #0
 8001630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001632:	e036      	b.n	80016a2 <UART_PRINT_VAL+0xfa>
        currentVal *= 10;
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <UART_PRINT_VAL+0x130>)
 800163a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800163e:	f7fe fe47 	bl	80002d0 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        sprintf(temp, "%i", abs((int)currentVal));
 800164a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800164e:	f7ff f9ad 	bl	80009ac <__aeabi_d2iz>
 8001652:	4603      	mov	r3, r0
 8001654:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001658:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	491b      	ldr	r1, [pc, #108]	; (80016d0 <UART_PRINT_VAL+0x128>)
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fd2a 	bl	80070bc <siprintf>
        strcat(total, temp);
 8001668:	f107 020c 	add.w	r2, r7, #12
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fd42 	bl	80070fc <strcat>
        currentVal -= (int)currentVal;
 8001678:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800167c:	f7ff f996 	bl	80009ac <__aeabi_d2iz>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f8a0 	bl	80007c8 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001690:	f7fe ff4c 	bl	800052c <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 800169c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800169e:	3301      	adds	r3, #1
 80016a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	ddc5      	ble.n	8001634 <UART_PRINT_VAL+0x8c>
    }
    HAL_UART_Transmit(&huart2, total, strlen(total), 100);
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fdb7 	bl	8000220 <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f107 0118 	add.w	r1, r7, #24
 80016ba:	2364      	movs	r3, #100	; 0x64
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <UART_PRINT_VAL+0x134>)
 80016be:	f004 feb1 	bl	8006424 <HAL_UART_Transmit>
}
 80016c2:	bf00      	nop
 80016c4:	3758      	adds	r7, #88	; 0x58
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08007a08 	.word	0x08007a08
 80016d0:	08007a0c 	.word	0x08007a0c
 80016d4:	08007a10 	.word	0x08007a10
 80016d8:	40240000 	.word	0x40240000
 80016dc:	20000240 	.word	0x20000240

080016e0 <UART_PRINT_TEXT>:
void UART_PRINT_TEXT(uint8_t* MSG){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, MSG, strlen(MSG), 100);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7fe fd99 	bl	8000220 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <UART_PRINT_TEXT+0x24>)
 80016f8:	f004 fe94 	bl	8006424 <HAL_UART_Transmit>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000240 	.word	0x20000240

08001708 <BNO055_INIT>:
	else{
		val = value;
	}
	return val;
}
void BNO055_INIT(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDR, 0x3D, 1, 0x07, 1, 100); //OPR_MODE = AMG (turn on all sensors)
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2301      	movs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	2307      	movs	r3, #7
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	223d      	movs	r2, #61	; 0x3d
 800171e:	2152      	movs	r1, #82	; 0x52
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <BNO055_INIT+0x24>)
 8001722:	f001 febd 	bl	80034a0 <HAL_I2C_Mem_Write>
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000f8 	.word	0x200000f8

08001730 <BNO055_GET_DATA>:
int BNO055_GET_DATA(uint8_t addr, uint16_t dataSize){
 8001730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001734:	b08b      	sub	sp, #44	; 0x2c
 8001736:	af04      	add	r7, sp, #16
 8001738:	4603      	mov	r3, r0
 800173a:	460a      	mov	r2, r1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	4613      	mov	r3, r2
 8001740:	80bb      	strh	r3, [r7, #4]
 8001742:	466b      	mov	r3, sp
 8001744:	461e      	mov	r6, r3
	int val = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
	uint16_t value = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	827b      	strh	r3, [r7, #18]
	uint8_t receiveData[dataSize];
 800174e:	88b9      	ldrh	r1, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	3b01      	subs	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	b28b      	uxth	r3, r1
 8001758:	2200      	movs	r2, #0
 800175a:	4698      	mov	r8, r3
 800175c:	4691      	mov	r9, r2
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800176a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001772:	b28b      	uxth	r3, r1
 8001774:	2200      	movs	r2, #0
 8001776:	461c      	mov	r4, r3
 8001778:	4615      	mov	r5, r2
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	00eb      	lsls	r3, r5, #3
 8001784:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001788:	00e2      	lsls	r2, r4, #3
 800178a:	460b      	mov	r3, r1
 800178c:	3307      	adds	r3, #7
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	ebad 0d03 	sub.w	sp, sp, r3
 8001796:	ab04      	add	r3, sp, #16
 8001798:	3300      	adds	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDR, addr, 1, receiveData, dataSize, 100);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	2364      	movs	r3, #100	; 0x64
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	2152      	movs	r1, #82	; 0x52
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <BNO055_GET_DATA+0xc8>)
 80017b2:	f001 ff89 	bl	80036c8 <HAL_I2C_Mem_Read>
	value = (receiveData[1] << 8 | receiveData[0]);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	827b      	strh	r3, [r7, #18]
	if(value > 0x7fff){
 80017ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da09      	bge.n	80017e6 <BNO055_GET_DATA+0xb6>
		value = value - 0x01;
 80017d2:	8a7b      	ldrh	r3, [r7, #18]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	827b      	strh	r3, [r7, #18]
		value = ~value;
 80017d8:	8a7b      	ldrh	r3, [r7, #18]
 80017da:	43db      	mvns	r3, r3
 80017dc:	827b      	strh	r3, [r7, #18]
		val = -value;
 80017de:	8a7b      	ldrh	r3, [r7, #18]
 80017e0:	425b      	negs	r3, r3
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e001      	b.n	80017ea <BNO055_GET_DATA+0xba>
	}
	else{
		val = value;
 80017e6:	8a7b      	ldrh	r3, [r7, #18]
 80017e8:	617b      	str	r3, [r7, #20]
	}
	return val;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	46b5      	mov	sp, r6
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017f8:	200000f8 	.word	0x200000f8

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_MspInit+0x44>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_MspInit+0x44>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6613      	str	r3, [r2, #96]	; 0x60
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_MspInit+0x44>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_MspInit+0x44>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_MspInit+0x44>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b09a      	sub	sp, #104	; 0x68
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2244      	movs	r2, #68	; 0x44
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f005 fc1b 	bl	80070ac <memset>
  if(hadc->Instance==ADC1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187e:	d133      	bne.n	80018e8 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001884:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001886:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f949 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800189c:	f7ff ffae 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_ADC_MspInit+0xa0>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_ADC_MspInit+0xa0>)
 80018a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_ADC_MspInit+0xa0>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_ADC_MspInit+0xa0>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_ADC_MspInit+0xa0>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_ADC_MspInit+0xa0>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d0:	2301      	movs	r3, #1
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e0:	4619      	mov	r1, r3
 80018e2:	4804      	ldr	r0, [pc, #16]	; (80018f4 <HAL_ADC_MspInit+0xa4>)
 80018e4:	f001 fbb2 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3768      	adds	r7, #104	; 0x68
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000400 	.word	0x48000400

080018f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09c      	sub	sp, #112	; 0x70
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	2244      	movs	r2, #68	; 0x44
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fbc7 	bl	80070ac <memset>
  if(hi2c->Instance==I2C1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <HAL_I2C_MspInit+0xe0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d153      	bne.n	80019d0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001928:	2340      	movs	r3, #64	; 0x40
 800192a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	4618      	mov	r0, r3
 8001936:	f003 f8f7 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001940:	f7ff ff5c 	bl	80017fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001960:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001978:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197a:	2312      	movs	r3, #18
 800197c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001986:	2304      	movs	r3, #4
 8001988:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f001 fb5a 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199c:	2312      	movs	r3, #18
 800199e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a8:	2304      	movs	r3, #4
 80019aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019b0:	4619      	mov	r1, r3
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <HAL_I2C_MspInit+0xe8>)
 80019b4:	f001 fb4a 	bl	800304c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 80019be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c2:	6593      	str	r3, [r2, #88]	; 0x58
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_I2C_MspInit+0xe4>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3770      	adds	r7, #112	; 0x70
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40005400 	.word	0x40005400
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000400 	.word	0x48000400

080019e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0x7c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d128      	bne.n	8001a58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a10:	6613      	str	r3, [r2, #96]	; 0x60
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a36:	23a0      	movs	r3, #160	; 0xa0
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a46:	2305      	movs	r3, #5
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f001 fafa 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013000 	.word	0x40013000
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_TIM_Base_MspInit+0x5c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10c      	bne.n	8001a94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_TIM_Base_MspInit+0x60>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_TIM_Base_MspInit+0x60>)
 8001a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a84:	6613      	str	r3, [r2, #96]	; 0x60
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_TIM_Base_MspInit+0x60>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a92:	e010      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_Base_MspInit+0x60>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_Base_MspInit+0x60>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_Base_MspInit+0x60>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40012c00 	.word	0x40012c00
 8001ac8:	40021000 	.word	0x40021000

08001acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_TIM_MspPostInit+0x68>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d11d      	bne.n	8001b2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_TIM_MspPostInit+0x6c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_TIM_MspPostInit+0x6c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_TIM_MspPostInit+0x6c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b18:	2306      	movs	r3, #6
 8001b1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b26:	f001 fa91 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40012c00 	.word	0x40012c00
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b09a      	sub	sp, #104	; 0x68
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	2244      	movs	r2, #68	; 0x44
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f005 faa5 	bl	80070ac <memset>
  if(huart->Instance==USART2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_UART_MspInit+0xa8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d136      	bne.n	8001bda <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 ffd5 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b84:	f7ff fe3a 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_UART_MspInit+0xac>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_UART_MspInit+0xac>)
 8001b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b92:	6593      	str	r3, [r2, #88]	; 0x58
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_UART_MspInit+0xac>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_UART_MspInit+0xac>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_UART_MspInit+0xac>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_UART_MspInit+0xac>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001bb8:	230c      	movs	r3, #12
 8001bba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f001 fa39 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3768      	adds	r7, #104	; 0x68
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40004400 	.word	0x40004400
 8001be8:	40021000 	.word	0x40021000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 f8c6 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f005 f9f2 	bl	8007058 <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20008000 	.word	0x20008000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	200002d0 	.word	0x200002d0
 8001ca8:	200002e8 	.word	0x200002e8

08001cac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <SystemInit+0x20>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <SystemInit+0x20>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd6:	490e      	ldr	r1, [pc, #56]	; (8001d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <LoopForever+0xe>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cec:	4c0b      	ldr	r4, [pc, #44]	; (8001d1c <LoopForever+0x16>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cfa:	f7ff ffd7 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfe:	f005 f9b1 	bl	8007064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d02:	f7fe fffd 	bl	8000d00 <main>

08001d06 <LoopForever>:

LoopForever:
    b LoopForever
 8001d06:	e7fe      	b.n	8001d06 <LoopForever>
  ldr   r0, =_estack
 8001d08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d14:	08007a98 	.word	0x08007a98
  ldr r2, =_sbss
 8001d18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d1c:	200002e8 	.word	0x200002e8

08001d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d20:	e7fe      	b.n	8001d20 <ADC1_2_IRQHandler>

08001d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f001 f95b 	bl	8002fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f80e 	bl	8001d54 <HAL_InitTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	e001      	b.n	8001d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d44:	f7ff fd60 	bl	8001808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d48:	79fb      	ldrb	r3, [r7, #7]

}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_InitTick+0x68>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d022      	beq.n	8001dae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_InitTick+0x6c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_InitTick+0x68>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 f958 	bl	8003032 <HAL_SYSTICK_Config>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10f      	bne.n	8001da8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	d809      	bhi.n	8001da2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295
 8001d96:	f001 f932 	bl	8002ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_InitTick+0x70>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e004      	b.n	8001db2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_IncTick+0x1c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_IncTick+0x20>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a03      	ldr	r2, [pc, #12]	; (8001de4 <HAL_IncTick+0x1c>)
 8001dd8:	6013      	str	r3, [r2, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	200002d4 	.word	0x200002d4
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200002d4 	.word	0x200002d4

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff ffee 	bl	8001dec <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d004      	beq.n	8001e28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_Delay+0x40>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e28:	bf00      	nop
 8001e2a:	f7ff ffdf 	bl	8001dec <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d8f7      	bhi.n	8001e2a <HAL_Delay+0x26>
  {
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000008 	.word	0x20000008

08001e48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3360      	adds	r3, #96	; 0x60
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <LL_ADC_SetOffset+0x44>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ee8:	bf00      	nop
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	03fff000 	.word	0x03fff000

08001ef8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3360      	adds	r3, #96	; 0x60
 8001f06:	461a      	mov	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3360      	adds	r3, #96	; 0x60
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3360      	adds	r3, #96	; 0x60
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3360      	adds	r3, #96	; 0x60
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	615a      	str	r2, [r3, #20]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3330      	adds	r3, #48	; 0x30
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	4413      	add	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	211f      	movs	r1, #31
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 011f 	and.w	r1, r3, #31
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	431a      	orrs	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002038:	bf00      	nop
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3314      	adds	r3, #20
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	0e5b      	lsrs	r3, r3, #25
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	0d1b      	lsrs	r3, r3, #20
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2107      	movs	r1, #7
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	401a      	ands	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	0d1b      	lsrs	r3, r3, #20
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800208e:	bf00      	nop
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d10a      	bne.n	80020c6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	431a      	orrs	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80020c4:	e00a      	b.n	80020dc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	43db      	mvns	r3, r3
 80020d4:	401a      	ands	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	407f0000 	.word	0x407f0000

080020ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6093      	str	r3, [r2, #8]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002124:	d101      	bne.n	800212a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800214c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002174:	d101      	bne.n	800217a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <LL_ADC_IsEnabled+0x18>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <LL_ADC_IsEnabled+0x1a>
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d101      	bne.n	80021c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d101      	bne.n	80021ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e177      	b.n	8002506 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fb13 	bl	8001850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff67 	bl	8002110 <LL_ADC_IsDeepPowerDownEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff4d 	bl	80020ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff82 	bl	8002160 <LL_ADC_IsInternalRegulatorEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d115      	bne.n	800228e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff66 	bl	8002138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800226c:	4b9c      	ldr	r3, [pc, #624]	; (80024e0 <HAL_ADC_Init+0x2e4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	4a9c      	ldr	r2, [pc, #624]	; (80024e4 <HAL_ADC_Init+0x2e8>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	3301      	adds	r3, #1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002280:	e002      	b.n	8002288 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff64 	bl	8002160 <LL_ADC_IsInternalRegulatorEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10d      	bne.n	80022ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff75 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 80022c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8110 	bne.w	80024f4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 810c 	bne.w	80024f4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022e4:	f043 0202 	orr.w	r2, r3, #2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff49 	bl	8002188 <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d111      	bne.n	8002320 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002300:	f7ff ff42 	bl	8002188 <LL_ADC_IsEnabled>
 8002304:	4604      	mov	r4, r0
 8002306:	4878      	ldr	r0, [pc, #480]	; (80024e8 <HAL_ADC_Init+0x2ec>)
 8002308:	f7ff ff3e 	bl	8002188 <LL_ADC_IsEnabled>
 800230c:	4603      	mov	r3, r0
 800230e:	4323      	orrs	r3, r4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4619      	mov	r1, r3
 800231a:	4874      	ldr	r0, [pc, #464]	; (80024ec <HAL_ADC_Init+0x2f0>)
 800231c:	f7ff fd94 	bl	8001e48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7f5b      	ldrb	r3, [r3, #29]
 8002324:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800232a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002330:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002336:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800233e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800234a:	2b01      	cmp	r3, #1
 800234c:	d106      	bne.n	800235c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	045b      	lsls	r3, r3, #17
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	4b5c      	ldr	r3, [pc, #368]	; (80024f0 <HAL_ADC_Init+0x2f4>)
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	430b      	orrs	r3, r1
 800238a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff01 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 80023ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff0e 	bl	80021d4 <LL_ADC_INJ_IsConversionOngoing>
 80023b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d16d      	bne.n	800249c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d16a      	bne.n	800249c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e2:	f023 0302 	bic.w	r3, r3, #2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d017      	beq.n	8002428 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002406:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002410:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6911      	ldr	r1, [r2, #16]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002426:	e013      	b.n	8002450 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002436:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800244c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002456:	2b01      	cmp	r3, #1
 8002458:	d118      	bne.n	800248c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002470:	4311      	orrs	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800247c:	430a      	orrs	r2, r1
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	611a      	str	r2, [r3, #16]
 800248a:	e007      	b.n	800249c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10c      	bne.n	80024be <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f023 010f 	bic.w	r1, r3, #15
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	1e5a      	subs	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
 80024bc:	e007      	b.n	80024ce <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 020f 	bic.w	r2, r2, #15
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80024de:	e011      	b.n	8002504 <HAL_ADC_Init+0x308>
 80024e0:	20000000 	.word	0x20000000
 80024e4:	053e2d63 	.word	0x053e2d63
 80024e8:	50000100 	.word	0x50000100
 80024ec:	50000300 	.word	0x50000300
 80024f0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002504:	7ffb      	ldrb	r3, [r7, #31]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd90      	pop	{r4, r7, pc}
 800250e:	bf00      	nop

08002510 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0b6      	sub	sp, #216	; 0xd8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x22>
 800252e:	2302      	movs	r3, #2
 8002530:	e3c8      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x7b4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fe35 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 83ad 	bne.w	8002ca6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	f7ff fd47 	bl	8001fec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fe23 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 8002568:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fe2f 	bl	80021d4 <LL_ADC_INJ_IsConversionOngoing>
 8002576:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800257a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 81d9 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 81d4 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002596:	d10f      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7ff fd4e 	bl	8002044 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd08 	bl	8001fc6 <LL_ADC_SetSamplingTimeCommonConfig>
 80025b6:	e00e      	b.n	80025d6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f7ff fd3d 	bl	8002044 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fcf8 	bl	8001fc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d022      	beq.n	800263e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002608:	f7ff fc52 	bl	8001eb0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6919      	ldr	r1, [r3, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	461a      	mov	r2, r3
 800261a:	f7ff fc9e 	bl	8001f5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6919      	ldr	r1, [r3, #16]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7f1b      	ldrb	r3, [r3, #28]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x124>
 800262e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002632:	e000      	b.n	8002636 <HAL_ADC_ConfigChannel+0x126>
 8002634:	2300      	movs	r3, #0
 8002636:	461a      	mov	r2, r3
 8002638:	f7ff fcaa 	bl	8001f90 <LL_ADC_SetOffsetSaturation>
 800263c:	e17b      	b.n	8002936 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fc57 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x15a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fc4c 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	e01e      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x198>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fc41 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800268c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e004      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800269c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1b0>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	e018      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1e2>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80026e4:	2320      	movs	r3, #32
 80026e6:	e004      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80026e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fc10 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fbf4 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x220>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fbe9 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	e01e      	b.n	800276e <HAL_ADC_ConfigChannel+0x25e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fbde 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800274e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e004      	b.n	800276c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x276>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	e018      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x2a8>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800279a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800279e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80027ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fbad 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fb91 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x2e6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fb86 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	e01e      	b.n	8002834 <HAL_ADC_ConfigChannel+0x324>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb7b 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800281c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e004      	b.n	8002832 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_ConfigChannel+0x33c>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	e016      	b.n	800287a <HAL_ADC_ConfigChannel+0x36a>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800285e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e004      	b.n	800287a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800287a:	429a      	cmp	r2, r3
 800287c:	d106      	bne.n	800288c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fb4c 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2103      	movs	r1, #3
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fb30 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x3a8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2103      	movs	r1, #3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fb25 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	e017      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x3d8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2103      	movs	r1, #3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fb1a 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e003      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80028de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x3f0>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	e011      	b.n	8002924 <HAL_ADC_ConfigChannel+0x414>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800290e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002910:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002924:	429a      	cmp	r2, r3
 8002926:	d106      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	2103      	movs	r1, #3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff faf7 	bl	8001f24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fc24 	bl	8002188 <LL_ADC_IsEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 8140 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	461a      	mov	r2, r3
 8002956:	f7ff fba1 	bl	800209c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4a8f      	ldr	r2, [pc, #572]	; (8002b9c <HAL_ADC_ConfigChannel+0x68c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f040 8131 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10b      	bne.n	800298e <HAL_ADC_ConfigChannel+0x47e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	3301      	adds	r3, #1
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2b09      	cmp	r3, #9
 8002984:	bf94      	ite	ls
 8002986:	2301      	movls	r3, #1
 8002988:	2300      	movhi	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e019      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x4b2>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800299c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2b09      	cmp	r3, #9
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d079      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x4d2>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	e015      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x4fe>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	069b      	lsls	r3, r3, #26
 8002a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x51e>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	e017      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x54e>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e003      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	ea42 0103 	orr.w	r1, r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x574>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	3301      	adds	r3, #1
 8002a76:	f003 021f 	and.w	r2, r3, #31
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	e018      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x5a6>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	e081      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x5c6>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	3301      	adds	r3, #1
 8002ace:	069b      	lsls	r3, r3, #26
 8002ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad4:	e015      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x5f2>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002aee:	2320      	movs	r3, #32
 8002af0:	e003      	b.n	8002afa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	069b      	lsls	r3, r3, #26
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x612>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	3301      	adds	r3, #1
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	e017      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x642>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e003      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	ea42 0103 	orr.w	r1, r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x66e>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	3b1e      	subs	r3, #30
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	e01e      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x6ac>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	613b      	str	r3, [r7, #16]
  return result;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e006      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x698>
 8002b9a:	bf00      	nop
 8002b9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b1e      	subs	r3, #30
 8002bb6:	051b      	lsls	r3, r3, #20
 8002bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6892      	ldr	r2, [r2, #8]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7ff fa3e 	bl	8002044 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_ADC_ConfigChannel+0x7bc>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d071      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd4:	483e      	ldr	r0, [pc, #248]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bd6:	f7ff f95d 	bl	8001e94 <LL_ADC_GetCommonPathInternalCh>
 8002bda:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3c      	ldr	r2, [pc, #240]	; (8002cd4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x6e2>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a3a      	ldr	r2, [pc, #232]	; (8002cd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d127      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d121      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c06:	d157      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c10:	4619      	mov	r1, r3
 8002c12:	482f      	ldr	r0, [pc, #188]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c14:	f7ff f92b 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_ADC_ConfigChannel+0x7cc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c32:	e002      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f9      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c40:	e03a      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d113      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x764>
 8002c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02a      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4818      	ldr	r0, [pc, #96]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c6e:	f7ff f8fe 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c72:	e021      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_ADC_ConfigChannel+0x7dc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d011      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ca0:	f7ff f8e5 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
 8002ca4:	e008      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cc0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	37d8      	adds	r7, #216	; 0xd8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	80080000 	.word	0x80080000
 8002cd0:	50000300 	.word	0x50000300
 8002cd4:	c3210000 	.word	0xc3210000
 8002cd8:	90c00010 	.word	0x90c00010
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	053e2d63 	.word	0x053e2d63
 8002ce4:	c7520000 	.word	0xc7520000
 8002ce8:	50000100 	.word	0x50000100
 8002cec:	cb840000 	.word	0xcb840000

08002cf0 <LL_ADC_IsEnabled>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <LL_ADC_IsEnabled+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_ADC_IsEnabled+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d101      	bne.n	8002d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b0a1      	sub	sp, #132	; 0x84
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e08b      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d62:	2300      	movs	r3, #0
 8002d64:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d66:	2300      	movs	r3, #0
 8002d68:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d72:	d102      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d74:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	e001      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10b      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e06a      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffb9 	bl	8002d16 <LL_ADC_REG_IsConversionOngoing>
 8002da4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ffb3 	bl	8002d16 <LL_ADC_REG_IsConversionOngoing>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d14c      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d149      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002dbe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d028      	beq.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dda:	035b      	lsls	r3, r3, #13
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002de8:	f7ff ff82 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002dec:	4604      	mov	r4, r0
 8002dee:	4823      	ldr	r0, [pc, #140]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002df0:	f7ff ff7e 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4323      	orrs	r3, r4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d133      	bne.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e04:	f023 030f 	bic.w	r3, r3, #15
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	6811      	ldr	r1, [r2, #0]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e18:	e024      	b.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e2a:	f7ff ff61 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4812      	ldr	r0, [pc, #72]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e32:	f7ff ff5d 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4323      	orrs	r3, r4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d112      	bne.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e46:	f023 030f 	bic.w	r3, r3, #15
 8002e4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e4c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4e:	e009      	b.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e62:	e000      	b.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3784      	adds	r7, #132	; 0x84
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	50000100 	.word	0x50000100
 8002e80:	50000300 	.word	0x50000300

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	db0a      	blt.n	8002f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	490c      	ldr	r1, [pc, #48]	; (8002f34 <__NVIC_SetPriority+0x4c>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	0112      	lsls	r2, r2, #4
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f10:	e00a      	b.n	8002f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4908      	ldr	r1, [pc, #32]	; (8002f38 <__NVIC_SetPriority+0x50>)
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	0112      	lsls	r2, r2, #4
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	440b      	add	r3, r1
 8002f26:	761a      	strb	r2, [r3, #24]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000e100 	.word	0xe000e100
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f1c3 0307 	rsb	r3, r3, #7
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	bf28      	it	cs
 8002f5a:	2304      	movcs	r3, #4
 8002f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d902      	bls.n	8002f6c <NVIC_EncodePriority+0x30>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3b03      	subs	r3, #3
 8002f6a:	e000      	b.n	8002f6e <NVIC_EncodePriority+0x32>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	f04f 32ff 	mov.w	r2, #4294967295
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	401a      	ands	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	43d9      	mvns	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	4313      	orrs	r3, r2
         );
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	; 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb4:	d301      	bcc.n	8002fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00f      	b.n	8002fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <SysTick_Config+0x40>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	f7ff ff8e 	bl	8002ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <SysTick_Config+0x40>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <SysTick_Config+0x40>)
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	e000e010 	.word	0xe000e010

08002fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff47 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b086      	sub	sp, #24
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800300c:	f7ff ff5e 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 8003010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f7ff ff90 	bl	8002f3c <NVIC_EncodePriority>
 800301c:	4602      	mov	r2, r0
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff5f 	bl	8002ee8 <__NVIC_SetPriority>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffb2 	bl	8002fa4 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800305a:	e15a      	b.n	8003312 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2101      	movs	r1, #1
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 814c 	beq.w	800330c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d005      	beq.n	800308c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003088:	2b02      	cmp	r3, #2
 800308a:	d130      	bne.n	80030ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030c2:	2201      	movs	r2, #1
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0201 	and.w	r2, r3, #1
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d017      	beq.n	800312a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	2203      	movs	r2, #3
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d123      	bne.n	800317e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	08da      	lsrs	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	220f      	movs	r2, #15
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	08da      	lsrs	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3208      	adds	r2, #8
 8003178:	6939      	ldr	r1, [r7, #16]
 800317a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0203 	and.w	r2, r3, #3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a6 	beq.w	800330c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c0:	4b5b      	ldr	r3, [pc, #364]	; (8003330 <HAL_GPIO_Init+0x2e4>)
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	4a5a      	ldr	r2, [pc, #360]	; (8003330 <HAL_GPIO_Init+0x2e4>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6613      	str	r3, [r2, #96]	; 0x60
 80031cc:	4b58      	ldr	r3, [pc, #352]	; (8003330 <HAL_GPIO_Init+0x2e4>)
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d8:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003202:	d01f      	beq.n	8003244 <HAL_GPIO_Init+0x1f8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d019      	beq.n	8003240 <HAL_GPIO_Init+0x1f4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a4b      	ldr	r2, [pc, #300]	; (800333c <HAL_GPIO_Init+0x2f0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_GPIO_Init+0x1f0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_GPIO_Init+0x2f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00d      	beq.n	8003238 <HAL_GPIO_Init+0x1ec>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a49      	ldr	r2, [pc, #292]	; (8003344 <HAL_GPIO_Init+0x2f8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <HAL_GPIO_Init+0x1e8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a48      	ldr	r2, [pc, #288]	; (8003348 <HAL_GPIO_Init+0x2fc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_GPIO_Init+0x1e4>
 800322c:	2305      	movs	r3, #5
 800322e:	e00a      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003230:	2306      	movs	r3, #6
 8003232:	e008      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003234:	2304      	movs	r3, #4
 8003236:	e006      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003238:	2303      	movs	r3, #3
 800323a:	e004      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 800323c:	2302      	movs	r3, #2
 800323e:	e002      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003244:	2300      	movs	r3, #0
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	f002 0203 	and.w	r2, r2, #3
 800324c:	0092      	lsls	r2, r2, #2
 800324e:	4093      	lsls	r3, r2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003256:	4937      	ldr	r1, [pc, #220]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_GPIO_Init+0x300>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003288:	4a30      	ldr	r2, [pc, #192]	; (800334c <HAL_GPIO_Init+0x300>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800328e:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_GPIO_Init+0x300>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032b2:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_GPIO_Init+0x300>)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_GPIO_Init+0x300>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_GPIO_Init+0x300>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_GPIO_Init+0x300>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <HAL_GPIO_Init+0x300>)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3301      	adds	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	f47f ae9d 	bne.w	800305c <HAL_GPIO_Init+0x10>
  }
}
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40021000 	.word	0x40021000
 8003334:	40010000 	.word	0x40010000
 8003338:	48000400 	.word	0x48000400
 800333c:	48000800 	.word	0x48000800
 8003340:	48000c00 	.word	0x48000c00
 8003344:	48001000 	.word	0x48001000
 8003348:	48001400 	.word	0x48001400
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800336c:	e002      	b.n	8003374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e081      	b.n	8003496 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe faa6 	bl	80018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	e006      	b.n	8003408 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003406:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d104      	bne.n	800341a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800343c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	817b      	strh	r3, [r7, #10]
 80034b2:	460b      	mov	r3, r1
 80034b4:	813b      	strh	r3, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	f040 80f9 	bne.w	80036ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x34>
 80034ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0ed      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Mem_Write+0x4e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0e6      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f6:	f7fe fc79 	bl	8001dec <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fac3 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d1      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2221      	movs	r2, #33	; 0x21
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003540:	88f8      	ldrh	r0, [r7, #6]
 8003542:	893a      	ldrh	r2, [r7, #8]
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4603      	mov	r3, r0
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f9d3 	bl	80038fc <I2C_RequestMemoryWrite>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0a9      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d90e      	bls.n	8003590 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	b2da      	uxtb	r2, r3
 800357e:	8979      	ldrh	r1, [r7, #10]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fc2b 	bl	8003de4 <I2C_TransferConfig>
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fc1a 	bl	8003de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 faad 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e07b      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d034      	beq.n	8003668 <HAL_I2C_Mem_Write+0x1c8>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b00      	cmp	r3, #0
 8003604:	d130      	bne.n	8003668 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fa3f 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e04d      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2bff      	cmp	r3, #255	; 0xff
 8003628:	d90e      	bls.n	8003648 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	b2da      	uxtb	r2, r3
 8003636:	8979      	ldrh	r1, [r7, #10]
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fbcf 	bl	8003de4 <I2C_TransferConfig>
 8003646:	e00f      	b.n	8003668 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	b2da      	uxtb	r2, r3
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fbbe 	bl	8003de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d19e      	bne.n	80035b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fa8c 	bl	8003b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01a      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2220      	movs	r2, #32
 800368c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_I2C_Mem_Write+0x224>)
 800369a:	400b      	ands	r3, r1
 800369c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	fe00e800 	.word	0xfe00e800

080036c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	f040 80fd 	bne.w	80038ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_I2C_Mem_Read+0x34>
 80036f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0f1      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_I2C_Mem_Read+0x4e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0ea      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800371e:	f7fe fb65 	bl	8001dec <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2319      	movs	r3, #25
 800372a:	2201      	movs	r2, #1
 800372c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f9af 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0d5      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2222      	movs	r2, #34	; 0x22
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003768:	88f8      	ldrh	r0, [r7, #6]
 800376a:	893a      	ldrh	r2, [r7, #8]
 800376c:	8979      	ldrh	r1, [r7, #10]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	4603      	mov	r3, r0
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f913 	bl	80039a4 <I2C_RequestMemoryRead>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0ad      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2bff      	cmp	r3, #255	; 0xff
 8003798:	d90e      	bls.n	80037b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	8979      	ldrh	r1, [r7, #10]
 80037a8:	4b52      	ldr	r3, [pc, #328]	; (80038f4 <HAL_I2C_Mem_Read+0x22c>)
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fb17 	bl	8003de4 <I2C_TransferConfig>
 80037b6:	e00f      	b.n	80037d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	8979      	ldrh	r1, [r7, #10]
 80037ca:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_I2C_Mem_Read+0x22c>)
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fb06 	bl	8003de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	2200      	movs	r2, #0
 80037e0:	2104      	movs	r1, #4
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f956 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07c      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d034      	beq.n	8003898 <HAL_I2C_Mem_Read+0x1d0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d130      	bne.n	8003898 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2200      	movs	r2, #0
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f927 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e04d      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2bff      	cmp	r3, #255	; 0xff
 8003858:	d90e      	bls.n	8003878 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	22ff      	movs	r2, #255	; 0xff
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	b2da      	uxtb	r2, r3
 8003866:	8979      	ldrh	r1, [r7, #10]
 8003868:	2300      	movs	r3, #0
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fab7 	bl	8003de4 <I2C_TransferConfig>
 8003876:	e00f      	b.n	8003898 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	b2da      	uxtb	r2, r3
 8003888:	8979      	ldrh	r1, [r7, #10]
 800388a:	2300      	movs	r3, #0
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 faa6 	bl	8003de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d19a      	bne.n	80037d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f974 	bl	8003b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e01a      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2220      	movs	r2, #32
 80038bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_I2C_Mem_Read+0x230>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	80002400 	.word	0x80002400
 80038f8:	fe00e800 	.word	0xfe00e800

080038fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	460b      	mov	r3, r1
 8003910:	813b      	strh	r3, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	8979      	ldrh	r1, [r7, #10]
 800391c:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <I2C_RequestMemoryWrite+0xa4>)
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fa5d 	bl	8003de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f8f0 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02c      	b.n	8003998 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
 800394e:	e015      	b.n	800397c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	69b9      	ldr	r1, [r7, #24]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f8d6 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e012      	b.n	8003998 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003972:	893b      	ldrh	r3, [r7, #8]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2200      	movs	r2, #0
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f884 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	80002000 	.word	0x80002000

080039a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	8979      	ldrh	r1, [r7, #10]
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <I2C_RequestMemoryRead+0xa4>)
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2300      	movs	r3, #0
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fa0a 	bl	8003de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f89d 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e02c      	b.n	8003a3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039ea:	893b      	ldrh	r3, [r7, #8]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
 80039f4:	e015      	b.n	8003a22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039f6:	893b      	ldrh	r3, [r7, #8]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f883 	bl	8003b14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e012      	b.n	8003a3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2140      	movs	r1, #64	; 0x40
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f831 	bl	8003a94 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	80002000 	.word	0x80002000

08003a4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d103      	bne.n	8003a6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d007      	beq.n	8003a88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	619a      	str	r2, [r3, #24]
  }
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa4:	e022      	b.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d01e      	beq.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aae:	f7fe f99d 	bl	8001dec <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d302      	bcc.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d113      	bne.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e00f      	b.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d0cd      	beq.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b20:	e02c      	b.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f870 	bl	8003c0c <I2C_IsErrorOccurred>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e02a      	b.n	8003b8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d01e      	beq.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe f955 	bl	8001dec <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d113      	bne.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e007      	b.n	8003b8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d1cb      	bne.n	8003b22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba0:	e028      	b.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f830 	bl	8003c0c <I2C_IsErrorOccurred>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e026      	b.n	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fe f919 	bl	8001dec <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e007      	b.n	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d1cf      	bne.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d075      	beq.n	8003d24 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c40:	e056      	b.n	8003cf0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d052      	beq.n	8003cf0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe f8cf 	bl	8001dec <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_IsErrorOccurred+0x54>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d147      	bne.n	8003cf0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c82:	d12e      	bne.n	8003ce2 <I2C_IsErrorOccurred+0xd6>
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8a:	d02a      	beq.n	8003ce2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d027      	beq.n	8003ce2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ca2:	f7fe f8a3 	bl	8001dec <HAL_GetTick>
 8003ca6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca8:	e01b      	b.n	8003ce2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003caa:	f7fe f89f 	bl	8001dec <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b19      	cmp	r3, #25
 8003cb6:	d914      	bls.n	8003ce2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d1dc      	bne.n	8003caa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d003      	beq.n	8003d06 <I2C_IsErrorOccurred+0xfa>
 8003cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d09d      	beq.n	8003c42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2220      	movs	r2, #32
 8003d14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f043 0308 	orr.w	r3, r3, #8
 8003d5e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01c      	beq.n	8003dd4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fe56 	bl	8003a4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <I2C_IsErrorOccurred+0x1d4>)
 8003dac:	400b      	ands	r3, r1
 8003dae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	fe00e800 	.word	0xfe00e800

08003de4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	607b      	str	r3, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	4613      	mov	r3, r2
 8003df4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dfc:	7a7b      	ldrb	r3, [r7, #9]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e04:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e12:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	0d5b      	lsrs	r3, r3, #21
 8003e1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <I2C_TransferConfig+0x60>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	43db      	mvns	r3, r3
 8003e28:	ea02 0103 	and.w	r1, r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	03ff63ff 	.word	0x03ff63ff

08003e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d138      	bne.n	8003ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e032      	b.n	8003ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d139      	bne.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e033      	b.n	8003f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2224      	movs	r2, #36	; 0x24
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d141      	bne.n	800400a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f86:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f92:	d131      	bne.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f94:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9a:	4a46      	ldr	r2, [pc, #280]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fa4:	4b43      	ldr	r3, [pc, #268]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fac:	4a41      	ldr	r2, [pc, #260]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fb4:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2232      	movs	r2, #50	; 0x32
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	4a3f      	ldr	r2, [pc, #252]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	0c9b      	lsrs	r3, r3, #18
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fca:	e002      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d102      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f2      	bne.n	8003fcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fe6:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff2:	d158      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e057      	b.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffe:	4a2d      	ldr	r2, [pc, #180]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004008:	e04d      	b.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d141      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d131      	bne.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004026:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004030:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004038:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2232      	movs	r2, #50	; 0x32
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	0c9b      	lsrs	r3, r3, #18
 8004052:	3301      	adds	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004056:	e002      	b.n	800405e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3b01      	subs	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406a:	d102      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f2      	bne.n	8004058 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d112      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e011      	b.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004094:	e007      	b.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800409e:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40007000 	.word	0x40007000
 80040b8:	20000000 	.word	0x20000000
 80040bc:	431bde83 	.word	0x431bde83

080040c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e306      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d075      	beq.n	80041ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040de:	4b97      	ldr	r3, [pc, #604]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e8:	4b94      	ldr	r3, [pc, #592]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_OscConfig+0x3e>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d002      	beq.n	8004104 <HAL_RCC_OscConfig+0x44>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d10b      	bne.n	800411c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	4b8d      	ldr	r3, [pc, #564]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d05b      	beq.n	80041c8 <HAL_RCC_OscConfig+0x108>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d157      	bne.n	80041c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e2e1      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d106      	bne.n	8004134 <HAL_RCC_OscConfig+0x74>
 8004126:	4b85      	ldr	r3, [pc, #532]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a84      	ldr	r2, [pc, #528]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e01d      	b.n	8004170 <HAL_RCC_OscConfig+0xb0>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x98>
 800413e:	4b7f      	ldr	r3, [pc, #508]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7e      	ldr	r2, [pc, #504]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b7c      	ldr	r3, [pc, #496]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a7b      	ldr	r2, [pc, #492]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0xb0>
 8004158:	4b78      	ldr	r3, [pc, #480]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a77      	ldr	r2, [pc, #476]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800415e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	4b75      	ldr	r3, [pc, #468]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a74      	ldr	r2, [pc, #464]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800416a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd fe38 	bl	8001dec <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004180:	f7fd fe34 	bl	8001dec <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e2a6      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004192:	4b6a      	ldr	r3, [pc, #424]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0xc0>
 800419e:	e014      	b.n	80041ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fd fe24 	bl	8001dec <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a8:	f7fd fe20 	bl	8001dec <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e292      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ba:	4b60      	ldr	r3, [pc, #384]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0xe8>
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d075      	beq.n	80042c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d6:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e0:	4b56      	ldr	r3, [pc, #344]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b0c      	cmp	r3, #12
 80041ee:	d102      	bne.n	80041f6 <HAL_RCC_OscConfig+0x136>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d002      	beq.n	80041fc <HAL_RCC_OscConfig+0x13c>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d11f      	bne.n	800423c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041fc:	4b4f      	ldr	r3, [pc, #316]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x154>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e265      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b49      	ldr	r3, [pc, #292]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	4946      	ldr	r1, [pc, #280]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004228:	4b45      	ldr	r3, [pc, #276]	; (8004340 <HAL_RCC_OscConfig+0x280>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7fd fd91 	bl	8001d54 <HAL_InitTick>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d043      	beq.n	80042c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e251      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d023      	beq.n	800428c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004244:	4b3d      	ldr	r3, [pc, #244]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3c      	ldr	r2, [pc, #240]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800424a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fd fdcc 	bl	8001dec <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004258:	f7fd fdc8 	bl	8001dec <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e23a      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800426a:	4b34      	ldr	r3, [pc, #208]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004276:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	492d      	ldr	r1, [pc, #180]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
 800428a:	e01a      	b.n	80042c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428c:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2a      	ldr	r2, [pc, #168]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fda8 	bl	8001dec <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a0:	f7fd fda4 	bl	8001dec <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e216      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1e0>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d041      	beq.n	8004352 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01c      	beq.n	8004310 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d6:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80042d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042dc:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fd fd81 	bl	8001dec <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fd fd7d 	bl	8001dec <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e1ef      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ef      	beq.n	80042ee <HAL_RCC_OscConfig+0x22e>
 800430e:	e020      	b.n	8004352 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_RCC_OscConfig+0x27c>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fd fd64 	bl	8001dec <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004326:	e00d      	b.n	8004344 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004328:	f7fd fd60 	bl	8001dec <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d906      	bls.n	8004344 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e1d2      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004344:	4b8c      	ldr	r3, [pc, #560]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ea      	bne.n	8004328 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80a6 	beq.w	80044ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004360:	2300      	movs	r3, #0
 8004362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004364:	4b84      	ldr	r3, [pc, #528]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_OscConfig+0x2b4>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x2b6>
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	4b7f      	ldr	r3, [pc, #508]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	4a7e      	ldr	r2, [pc, #504]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
 8004386:	4b7c      	ldr	r3, [pc, #496]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004396:	4b79      	ldr	r3, [pc, #484]	; (800457c <HAL_RCC_OscConfig+0x4bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a2:	4b76      	ldr	r3, [pc, #472]	; (800457c <HAL_RCC_OscConfig+0x4bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a75      	ldr	r2, [pc, #468]	; (800457c <HAL_RCC_OscConfig+0x4bc>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ae:	f7fd fd1d 	bl	8001dec <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fd fd19 	bl	8001dec <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e18b      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c8:	4b6c      	ldr	r3, [pc, #432]	; (800457c <HAL_RCC_OscConfig+0x4bc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d108      	bne.n	80043ee <HAL_RCC_OscConfig+0x32e>
 80043dc:	4b66      	ldr	r3, [pc, #408]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	4a65      	ldr	r2, [pc, #404]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ec:	e024      	b.n	8004438 <HAL_RCC_OscConfig+0x378>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d110      	bne.n	8004418 <HAL_RCC_OscConfig+0x358>
 80043f6:	4b60      	ldr	r3, [pc, #384]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	4a5e      	ldr	r2, [pc, #376]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80043fe:	f043 0304 	orr.w	r3, r3, #4
 8004402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004406:	4b5c      	ldr	r3, [pc, #368]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	4a5a      	ldr	r2, [pc, #360]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004416:	e00f      	b.n	8004438 <HAL_RCC_OscConfig+0x378>
 8004418:	4b57      	ldr	r3, [pc, #348]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	4a56      	ldr	r2, [pc, #344]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004428:	4b53      	ldr	r3, [pc, #332]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	4a52      	ldr	r2, [pc, #328]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d016      	beq.n	800446e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fd fcd4 	bl	8001dec <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004446:	e00a      	b.n	800445e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fd fcd0 	bl	8001dec <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e140      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445e:	4b46      	ldr	r3, [pc, #280]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ed      	beq.n	8004448 <HAL_RCC_OscConfig+0x388>
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fd fcbd 	bl	8001dec <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fd fcb9 	bl	8001dec <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e129      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800448c:	4b3a      	ldr	r3, [pc, #232]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ed      	bne.n	8004476 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800449a:	7ffb      	ldrb	r3, [r7, #31]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d03c      	beq.n	8004532 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01c      	beq.n	80044fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80044c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd fc8c 	bl	8001dec <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d8:	f7fd fc88 	bl	8001dec <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0fa      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ea:	4b23      	ldr	r3, [pc, #140]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ef      	beq.n	80044d8 <HAL_RCC_OscConfig+0x418>
 80044f8:	e01b      	b.n	8004532 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004500:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd fc6f 	bl	8001dec <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004512:	f7fd fc6b 	bl	8001dec <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0dd      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ef      	bne.n	8004512 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80d1 	beq.w	80046de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b0c      	cmp	r3, #12
 8004546:	f000 808b 	beq.w	8004660 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d15e      	bne.n	8004610 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_RCC_OscConfig+0x4b8>)
 8004558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fd fc45 	bl	8001dec <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004564:	e00c      	b.n	8004580 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004566:	f7fd fc41 	bl	8001dec <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d905      	bls.n	8004580 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0b3      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
 8004578:	40021000 	.word	0x40021000
 800457c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ec      	bne.n	8004566 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800458c:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	4b56      	ldr	r3, [pc, #344]	; (80046ec <HAL_RCC_OscConfig+0x62c>)
 8004592:	4013      	ands	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a11      	ldr	r1, [r2, #32]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800459c:	3a01      	subs	r2, #1
 800459e:	0112      	lsls	r2, r2, #4
 80045a0:	4311      	orrs	r1, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045a6:	0212      	lsls	r2, r2, #8
 80045a8:	4311      	orrs	r1, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ae:	0852      	lsrs	r2, r2, #1
 80045b0:	3a01      	subs	r2, #1
 80045b2:	0552      	lsls	r2, r2, #21
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	3a01      	subs	r2, #1
 80045be:	0652      	lsls	r2, r2, #25
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045c6:	06d2      	lsls	r2, r2, #27
 80045c8:	430a      	orrs	r2, r1
 80045ca:	4947      	ldr	r1, [pc, #284]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d0:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a44      	ldr	r2, [pc, #272]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 80045d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a41      	ldr	r2, [pc, #260]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 80045e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd fc00 	bl	8001dec <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd fbfc 	bl	8001dec <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e06e      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004602:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x530>
 800460e:	e066      	b.n	80046de <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 8004616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800461c:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004628:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a2e      	ldr	r2, [pc, #184]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 800462e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004636:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd fbd8 	bl	8001dec <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd fbd4 	bl	8001dec <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e046      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x580>
 800465e:	e03e      	b.n	80046de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e039      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800466c:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <HAL_RCC_OscConfig+0x628>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 0203 	and.w	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	429a      	cmp	r2, r3
 800467e:	d12c      	bne.n	80046da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	3b01      	subs	r3, #1
 800468c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d123      	bne.n	80046da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d11b      	bne.n	80046da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d113      	bne.n	80046da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	3b01      	subs	r3, #1
 80046c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d109      	bne.n	80046da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	3b01      	subs	r3, #1
 80046d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000
 80046ec:	019f800c 	.word	0x019f800c

080046f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e11e      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d910      	bls.n	8004738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b8e      	ldr	r3, [pc, #568]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 020f 	bic.w	r2, r3, #15
 800471e:	498c      	ldr	r1, [pc, #560]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b8a      	ldr	r3, [pc, #552]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e106      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d073      	beq.n	800482c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d129      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474c:	4b81      	ldr	r3, [pc, #516]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0f4      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800475c:	f000 f99e 	bl	8004a9c <RCC_GetSysClockFreqFromPLLSource>
 8004760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4a7c      	ldr	r2, [pc, #496]	; (8004958 <HAL_RCC_ClockConfig+0x268>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d93f      	bls.n	80047ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800476a:	4b7a      	ldr	r3, [pc, #488]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d033      	beq.n	80047ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004786:	2b00      	cmp	r3, #0
 8004788:	d12f      	bne.n	80047ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800478a:	4b72      	ldr	r3, [pc, #456]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004792:	4a70      	ldr	r2, [pc, #448]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e024      	b.n	80047ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a8:	4b6a      	ldr	r3, [pc, #424]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0c6      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b8:	4b66      	ldr	r3, [pc, #408]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0be      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047c8:	f000 f8ce 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4a61      	ldr	r2, [pc, #388]	; (8004958 <HAL_RCC_ClockConfig+0x268>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d909      	bls.n	80047ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047d6:	4b5f      	ldr	r3, [pc, #380]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	4a5d      	ldr	r2, [pc, #372]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	4b5a      	ldr	r3, [pc, #360]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4957      	ldr	r1, [pc, #348]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fd faf6 	bl	8001dec <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	e00a      	b.n	800481a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004804:	f7fd faf2 	bl	8001dec <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e095      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	4b4e      	ldr	r3, [pc, #312]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 020c 	and.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	429a      	cmp	r2, r3
 800482a:	d1eb      	bne.n	8004804 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d023      	beq.n	8004880 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b43      	ldr	r3, [pc, #268]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a42      	ldr	r2, [pc, #264]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800484a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800484e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800485c:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004864:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800486c:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4936      	ldr	r1, [pc, #216]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
 800487e:	e008      	b.n	8004892 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b80      	cmp	r3, #128	; 0x80
 8004884:	d105      	bne.n	8004892 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004886:	4b33      	ldr	r3, [pc, #204]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4a32      	ldr	r2, [pc, #200]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 800488c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004890:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004892:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d21d      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a0:	4b2b      	ldr	r3, [pc, #172]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 020f 	bic.w	r2, r3, #15
 80048a8:	4929      	ldr	r1, [pc, #164]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048b0:	f7fd fa9c 	bl	8001dec <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fd fa98 	bl	8001dec <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e03b      	b.n	8004946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1ed      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e8:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4917      	ldr	r1, [pc, #92]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	490f      	ldr	r1, [pc, #60]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800491a:	f000 f825 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 800491e:	4602      	mov	r2, r0
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_ClockConfig+0x264>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	490c      	ldr	r1, [pc, #48]	; (800495c <HAL_RCC_ClockConfig+0x26c>)
 800492c:	5ccb      	ldrb	r3, [r1, r3]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <HAL_RCC_ClockConfig+0x270>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x274>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd fa08 	bl	8001d54 <HAL_InitTick>
 8004944:	4603      	mov	r3, r0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40022000 	.word	0x40022000
 8004954:	40021000 	.word	0x40021000
 8004958:	04c4b400 	.word	0x04c4b400
 800495c:	08007a14 	.word	0x08007a14
 8004960:	20000000 	.word	0x20000000
 8004964:	20000004 	.word	0x20000004

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800496e:	4b2c      	ldr	r3, [pc, #176]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b04      	cmp	r3, #4
 8004978:	d102      	bne.n	8004980 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800497a:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e047      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d102      	bne.n	8004992 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800498c:	4b26      	ldr	r3, [pc, #152]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e03e      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004992:	4b23      	ldr	r3, [pc, #140]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d136      	bne.n	8004a0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049a8:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3301      	adds	r3, #1
 80049b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049bc:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c6:	68d2      	ldr	r2, [r2, #12]
 80049c8:	0a12      	lsrs	r2, r2, #8
 80049ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	617b      	str	r3, [r7, #20]
      break;
 80049d4:	e00c      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049d6:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	0a12      	lsrs	r2, r2, #8
 80049e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
      break;
 80049ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	0e5b      	lsrs	r3, r3, #25
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	3301      	adds	r3, #1
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e001      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a10:	693b      	ldr	r3, [r7, #16]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	007a1200 	.word	0x007a1200

08004a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000000 	.word	0x20000000

08004a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a48:	f7ff fff0 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4904      	ldr	r1, [pc, #16]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	08007a24 	.word	0x08007a24

08004a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a74:	f7ff ffda 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	0adb      	lsrs	r3, r3, #11
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4904      	ldr	r1, [pc, #16]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000
 8004a98:	08007a24 	.word	0x08007a24

08004a9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d10c      	bne.n	8004ada <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac0:	4a17      	ldr	r2, [pc, #92]	; (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aca:	68d2      	ldr	r2, [r2, #12]
 8004acc:	0a12      	lsrs	r2, r2, #8
 8004ace:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	617b      	str	r3, [r7, #20]
    break;
 8004ad8:	e00c      	b.n	8004af4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ae4:	68d2      	ldr	r2, [r2, #12]
 8004ae6:	0a12      	lsrs	r2, r2, #8
 8004ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
    break;
 8004af2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0e5b      	lsrs	r3, r3, #25
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b0e:	687b      	ldr	r3, [r7, #4]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	007a1200 	.word	0x007a1200
 8004b24:	00f42400 	.word	0x00f42400

08004b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b34:	2300      	movs	r3, #0
 8004b36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8098 	beq.w	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b46:	2300      	movs	r3, #0
 8004b48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4a:	4b43      	ldr	r3, [pc, #268]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5a:	4a3f      	ldr	r2, [pc, #252]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6593      	str	r3, [r2, #88]	; 0x58
 8004b62:	4b3d      	ldr	r3, [pc, #244]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b72:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a39      	ldr	r2, [pc, #228]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b7e:	f7fd f935 	bl	8001dec <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b84:	e009      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b86:	f7fd f931 	bl	8001dec <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d902      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	74fb      	strb	r3, [r7, #19]
        break;
 8004b98:	e005      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b9a:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0ef      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d159      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bac:	4b2a      	ldr	r3, [pc, #168]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01e      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d019      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc8:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd4:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be4:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf4:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd f8f1 	bl	8001dec <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	e00b      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fd f8ed 	bl	8001dec <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d902      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	74fb      	strb	r3, [r7, #19]
            break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ec      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c50:	e008      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	74bb      	strb	r3, [r7, #18]
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c64:	7c7b      	ldrb	r3, [r7, #17]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6a:	4ba6      	ldr	r3, [pc, #664]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	4aa5      	ldr	r2, [pc, #660]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c82:	4ba0      	ldr	r3, [pc, #640]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f023 0203 	bic.w	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	499c      	ldr	r1, [pc, #624]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca4:	4b97      	ldr	r3, [pc, #604]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f023 020c 	bic.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	4994      	ldr	r1, [pc, #592]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc6:	4b8f      	ldr	r3, [pc, #572]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	498b      	ldr	r1, [pc, #556]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce8:	4b86      	ldr	r3, [pc, #536]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4983      	ldr	r1, [pc, #524]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d0a:	4b7e      	ldr	r3, [pc, #504]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	497a      	ldr	r1, [pc, #488]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2c:	4b75      	ldr	r3, [pc, #468]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	4972      	ldr	r1, [pc, #456]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d4e:	4b6d      	ldr	r3, [pc, #436]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	4969      	ldr	r1, [pc, #420]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d70:	4b64      	ldr	r3, [pc, #400]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4961      	ldr	r1, [pc, #388]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d92:	4b5c      	ldr	r3, [pc, #368]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	4958      	ldr	r1, [pc, #352]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d015      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db4:	4b53      	ldr	r3, [pc, #332]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	4950      	ldr	r1, [pc, #320]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d015      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dec:	4b45      	ldr	r3, [pc, #276]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	4942      	ldr	r1, [pc, #264]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0a:	d105      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e0c:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a3c      	ldr	r2, [pc, #240]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e24:	4b37      	ldr	r3, [pc, #220]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	4934      	ldr	r1, [pc, #208]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e42:	d105      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e44:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a2e      	ldr	r2, [pc, #184]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d015      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e5c:	4b29      	ldr	r3, [pc, #164]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	4926      	ldr	r1, [pc, #152]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7c:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e94:	4b1b      	ldr	r3, [pc, #108]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	4918      	ldr	r1, [pc, #96]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb4:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ebe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d015      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	490a      	ldr	r1, [pc, #40]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ef8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000

08004f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e09d      	b.n	8005056 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2a:	d009      	beq.n	8004f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61da      	str	r2, [r3, #28]
 8004f32:	e005      	b.n	8004f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fc fd42 	bl	80019e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f80:	d902      	bls.n	8004f88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e002      	b.n	8004f8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f96:	d007      	beq.n	8004fa8 <HAL_SPI_Init+0xa0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	ea42 0103 	orr.w	r1, r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	f003 0204 	and.w	r2, r3, #4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005024:	ea42 0103 	orr.w	r1, r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e049      	b.n	8005104 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7fc fcef 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f000 fc07 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d001      	beq.n	8005124 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e042      	b.n	80051aa <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_TIM_Base_Start+0xac>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_TIM_Base_Start+0x5c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513e:	d013      	beq.n	8005168 <HAL_TIM_Base_Start+0x5c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <HAL_TIM_Base_Start+0xb0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_TIM_Base_Start+0x5c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_TIM_Base_Start+0xb4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_TIM_Base_Start+0x5c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <HAL_TIM_Base_Start+0xb8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_TIM_Base_Start+0x5c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_TIM_Base_Start+0xbc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d115      	bne.n	8005194 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_TIM_Base_Start+0xc0>)
 8005170:	4013      	ands	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b06      	cmp	r3, #6
 8005178:	d015      	beq.n	80051a6 <HAL_TIM_Base_Start+0x9a>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d011      	beq.n	80051a6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0201 	orr.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	e008      	b.n	80051a6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e000      	b.n	80051a8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	00010007 	.word	0x00010007

080051d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e049      	b.n	8005276 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f841 	bl	800527e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 fb4e 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_TIM_PWM_Start+0x24>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e03c      	b.n	8005332 <HAL_TIM_PWM_Start+0x9e>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d109      	bne.n	80052d2 <HAL_TIM_PWM_Start+0x3e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	bf14      	ite	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	2300      	moveq	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	e02f      	b.n	8005332 <HAL_TIM_PWM_Start+0x9e>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d109      	bne.n	80052ec <HAL_TIM_PWM_Start+0x58>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	e022      	b.n	8005332 <HAL_TIM_PWM_Start+0x9e>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d109      	bne.n	8005306 <HAL_TIM_PWM_Start+0x72>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	e015      	b.n	8005332 <HAL_TIM_PWM_Start+0x9e>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b10      	cmp	r3, #16
 800530a:	d109      	bne.n	8005320 <HAL_TIM_PWM_Start+0x8c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e008      	b.n	8005332 <HAL_TIM_PWM_Start+0x9e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e097      	b.n	800546a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_TIM_PWM_Start+0xb6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005348:	e023      	b.n	8005392 <HAL_TIM_PWM_Start+0xfe>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b04      	cmp	r3, #4
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Start+0xc6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005358:	e01b      	b.n	8005392 <HAL_TIM_PWM_Start+0xfe>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0xd6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005368:	e013      	b.n	8005392 <HAL_TIM_PWM_Start+0xfe>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b0c      	cmp	r3, #12
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0xe6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005378:	e00b      	b.n	8005392 <HAL_TIM_PWM_Start+0xfe>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b10      	cmp	r3, #16
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xf6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005388:	e003      	b.n	8005392 <HAL_TIM_PWM_Start+0xfe>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2201      	movs	r2, #1
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 feaa 	bl	80060f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a33      	ldr	r2, [pc, #204]	; (8005474 <HAL_TIM_PWM_Start+0x1e0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x13e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a32      	ldr	r2, [pc, #200]	; (8005478 <HAL_TIM_PWM_Start+0x1e4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x13e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a30      	ldr	r2, [pc, #192]	; (800547c <HAL_TIM_PWM_Start+0x1e8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x13e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <HAL_TIM_PWM_Start+0x1ec>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x13e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <HAL_TIM_PWM_Start+0x1f0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_Start+0x142>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_TIM_PWM_Start+0x144>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a20      	ldr	r2, [pc, #128]	; (8005474 <HAL_TIM_PWM_Start+0x1e0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_TIM_PWM_Start+0x194>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d013      	beq.n	8005428 <HAL_TIM_PWM_Start+0x194>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a20      	ldr	r2, [pc, #128]	; (8005488 <HAL_TIM_PWM_Start+0x1f4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_TIM_PWM_Start+0x194>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1f      	ldr	r2, [pc, #124]	; (800548c <HAL_TIM_PWM_Start+0x1f8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_TIM_PWM_Start+0x194>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a17      	ldr	r2, [pc, #92]	; (8005478 <HAL_TIM_PWM_Start+0x1e4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_TIM_PWM_Start+0x194>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a16      	ldr	r2, [pc, #88]	; (800547c <HAL_TIM_PWM_Start+0x1e8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d115      	bne.n	8005454 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	4b18      	ldr	r3, [pc, #96]	; (8005490 <HAL_TIM_PWM_Start+0x1fc>)
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b06      	cmp	r3, #6
 8005438:	d015      	beq.n	8005466 <HAL_TIM_PWM_Start+0x1d2>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d011      	beq.n	8005466 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005452:	e008      	b.n	8005466 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e000      	b.n	8005468 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40013400 	.word	0x40013400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	00010007 	.word	0x00010007

08005494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e0ff      	b.n	80056b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b14      	cmp	r3, #20
 80054be:	f200 80f0 	bhi.w	80056a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	080056a3 	.word	0x080056a3
 80054d0:	080056a3 	.word	0x080056a3
 80054d4:	080056a3 	.word	0x080056a3
 80054d8:	0800555d 	.word	0x0800555d
 80054dc:	080056a3 	.word	0x080056a3
 80054e0:	080056a3 	.word	0x080056a3
 80054e4:	080056a3 	.word	0x080056a3
 80054e8:	0800559f 	.word	0x0800559f
 80054ec:	080056a3 	.word	0x080056a3
 80054f0:	080056a3 	.word	0x080056a3
 80054f4:	080056a3 	.word	0x080056a3
 80054f8:	080055df 	.word	0x080055df
 80054fc:	080056a3 	.word	0x080056a3
 8005500:	080056a3 	.word	0x080056a3
 8005504:	080056a3 	.word	0x080056a3
 8005508:	08005621 	.word	0x08005621
 800550c:	080056a3 	.word	0x080056a3
 8005510:	080056a3 	.word	0x080056a3
 8005514:	080056a3 	.word	0x080056a3
 8005518:	08005661 	.word	0x08005661
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fa54 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0208 	orr.w	r2, r2, #8
 8005536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0204 	bic.w	r2, r2, #4
 8005546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6999      	ldr	r1, [r3, #24]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	619a      	str	r2, [r3, #24]
      break;
 800555a:	e0a5      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fac4 	bl	8005af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6999      	ldr	r1, [r3, #24]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	021a      	lsls	r2, r3, #8
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	619a      	str	r2, [r3, #24]
      break;
 800559c:	e084      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fb2d 	bl	8005c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0208 	orr.w	r2, r2, #8
 80055b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0204 	bic.w	r2, r2, #4
 80055c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69d9      	ldr	r1, [r3, #28]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	61da      	str	r2, [r3, #28]
      break;
 80055dc:	e064      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fb95 	bl	8005d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69d9      	ldr	r1, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	021a      	lsls	r2, r3, #8
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	61da      	str	r2, [r3, #28]
      break;
 800561e:	e043      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fbfe 	bl	8005e28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0208 	orr.w	r2, r2, #8
 800563a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0204 	bic.w	r2, r2, #4
 800564a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800565e:	e023      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fc42 	bl	8005ef0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800567a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056a0:	e002      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
      break;
 80056a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop

080056bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_TIM_ConfigClockSource+0x1c>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e0de      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x1da>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80056f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a63      	ldr	r2, [pc, #396]	; (80058a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	f000 80a9 	beq.w	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 8005718:	4a61      	ldr	r2, [pc, #388]	; (80058a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	f200 80ae 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 8005720:	4a60      	ldr	r2, [pc, #384]	; (80058a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	f000 80a1 	beq.w	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 8005728:	4a5e      	ldr	r2, [pc, #376]	; (80058a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	f200 80a6 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 8005730:	4a5d      	ldr	r2, [pc, #372]	; (80058a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005732:	4293      	cmp	r3, r2
 8005734:	f000 8099 	beq.w	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 8005738:	4a5b      	ldr	r2, [pc, #364]	; (80058a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800573a:	4293      	cmp	r3, r2
 800573c:	f200 809e 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 8005740:	4a5a      	ldr	r2, [pc, #360]	; (80058ac <HAL_TIM_ConfigClockSource+0x1f0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	f000 8091 	beq.w	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 8005748:	4a58      	ldr	r2, [pc, #352]	; (80058ac <HAL_TIM_ConfigClockSource+0x1f0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	f200 8096 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 8005750:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005754:	f000 8089 	beq.w	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 8005758:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800575c:	f200 808e 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005764:	d03e      	beq.n	80057e4 <HAL_TIM_ConfigClockSource+0x128>
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576a:	f200 8087 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	f000 8086 	beq.w	8005882 <HAL_TIM_ConfigClockSource+0x1c6>
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d87f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 800577c:	2b70      	cmp	r3, #112	; 0x70
 800577e:	d01a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0xfa>
 8005780:	2b70      	cmp	r3, #112	; 0x70
 8005782:	d87b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d050      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x16e>
 8005788:	2b60      	cmp	r3, #96	; 0x60
 800578a:	d877      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 800578c:	2b50      	cmp	r3, #80	; 0x50
 800578e:	d03c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x14e>
 8005790:	2b50      	cmp	r3, #80	; 0x50
 8005792:	d873      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d058      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x18e>
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d86f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d064      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 80057a0:	2b30      	cmp	r3, #48	; 0x30
 80057a2:	d86b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d060      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d867      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05c      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d05a      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x1ae>
 80057b4:	e062      	b.n	800587c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6899      	ldr	r1, [r3, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f000 fc75 	bl	80060b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	609a      	str	r2, [r3, #8]
      break;
 80057e2:	e04f      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6899      	ldr	r1, [r3, #8]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f000 fc5e 	bl	80060b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005806:	609a      	str	r2, [r3, #8]
      break;
 8005808:	e03c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	461a      	mov	r2, r3
 8005818:	f000 fbd0 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2150      	movs	r1, #80	; 0x50
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc29 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005828:	e02c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fbef 	bl	800601a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2160      	movs	r1, #96	; 0x60
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fc19 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005848:	e01c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fbb0 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2140      	movs	r1, #64	; 0x40
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fc09 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005868:	e00c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f000 fc00 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 800587a:	e003      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      break;
 8005880:	e000      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	00100070 	.word	0x00100070
 80058a4:	00100040 	.word	0x00100040
 80058a8:	00100030 	.word	0x00100030
 80058ac:	00100020 	.word	0x00100020

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3c      	ldr	r2, [pc, #240]	; (80059b4 <TIM_Base_SetConfig+0x104>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a39      	ldr	r2, [pc, #228]	; (80059b8 <TIM_Base_SetConfig+0x108>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a38      	ldr	r2, [pc, #224]	; (80059bc <TIM_Base_SetConfig+0x10c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x38>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a37      	ldr	r2, [pc, #220]	; (80059c0 <TIM_Base_SetConfig+0x110>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2d      	ldr	r2, [pc, #180]	; (80059b4 <TIM_Base_SetConfig+0x104>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01b      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d017      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2a      	ldr	r2, [pc, #168]	; (80059b8 <TIM_Base_SetConfig+0x108>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a29      	ldr	r2, [pc, #164]	; (80059bc <TIM_Base_SetConfig+0x10c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <TIM_Base_SetConfig+0x110>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <TIM_Base_SetConfig+0x114>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <TIM_Base_SetConfig+0x118>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_Base_SetConfig+0x8a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a25      	ldr	r2, [pc, #148]	; (80059cc <TIM_Base_SetConfig+0x11c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a10      	ldr	r2, [pc, #64]	; (80059b4 <TIM_Base_SetConfig+0x104>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a11      	ldr	r2, [pc, #68]	; (80059c0 <TIM_Base_SetConfig+0x110>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <TIM_Base_SetConfig+0x114>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <TIM_Base_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0xe8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <TIM_Base_SetConfig+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f023 0302 	bic.w	r3, r3, #2
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a2c      	ldr	r2, [pc, #176]	; (8005adc <TIM_OC1_SetConfig+0x10c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00f      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a2b      	ldr	r2, [pc, #172]	; (8005ae0 <TIM_OC1_SetConfig+0x110>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ae4 <TIM_OC1_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a29      	ldr	r2, [pc, #164]	; (8005ae8 <TIM_OC1_SetConfig+0x118>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC1_SetConfig+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a28      	ldr	r2, [pc, #160]	; (8005aec <TIM_OC1_SetConfig+0x11c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10c      	bne.n	8005a6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0308 	bic.w	r3, r3, #8
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 0304 	bic.w	r3, r3, #4
 8005a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <TIM_OC1_SetConfig+0x10c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00f      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <TIM_OC1_SetConfig+0x110>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00b      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <TIM_OC1_SetConfig+0x114>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <TIM_OC1_SetConfig+0x118>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC1_SetConfig+0xc2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC1_SetConfig+0x11c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0210 	bic.w	r2, r3, #16
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <TIM_OC2_SetConfig+0x100>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC2_SetConfig+0x6c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <TIM_OC2_SetConfig+0x104>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10d      	bne.n	8005b78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a1d      	ldr	r2, [pc, #116]	; (8005bf0 <TIM_OC2_SetConfig+0x100>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <TIM_OC2_SetConfig+0x104>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <TIM_OC2_SetConfig+0x108>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <TIM_OC2_SetConfig+0x10c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xb0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <TIM_OC2_SetConfig+0x110>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d113      	bne.n	8005bc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800

08005c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <TIM_OC3_SetConfig+0xfc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC3_SetConfig+0x6a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <TIM_OC3_SetConfig+0x100>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10d      	bne.n	8005c8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <TIM_OC3_SetConfig+0xfc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <TIM_OC3_SetConfig+0x100>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <TIM_OC3_SetConfig+0x104>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a19      	ldr	r2, [pc, #100]	; (8005d0c <TIM_OC3_SetConfig+0x108>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC3_SetConfig+0xae>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <TIM_OC3_SetConfig+0x10c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d113      	bne.n	8005cda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800

08005d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	031b      	lsls	r3, r3, #12
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a28      	ldr	r2, [pc, #160]	; (8005e14 <TIM_OC4_SetConfig+0x100>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC4_SetConfig+0x6c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a27      	ldr	r2, [pc, #156]	; (8005e18 <TIM_OC4_SetConfig+0x104>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10d      	bne.n	8005d9c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	031b      	lsls	r3, r3, #12
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <TIM_OC4_SetConfig+0x100>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_OC4_SetConfig+0xb0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <TIM_OC4_SetConfig+0x104>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_OC4_SetConfig+0xb0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <TIM_OC4_SetConfig+0x108>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC4_SetConfig+0xb0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <TIM_OC4_SetConfig+0x10c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC4_SetConfig+0xb0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a19      	ldr	r2, [pc, #100]	; (8005e24 <TIM_OC4_SetConfig+0x110>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d113      	bne.n	8005dec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dd2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	019b      	lsls	r3, r3, #6
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	019b      	lsls	r3, r3, #6
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40013400 	.word	0x40013400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40014400 	.word	0x40014400
 8005e24:	40014800 	.word	0x40014800

08005e28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <TIM_OC5_SetConfig+0xb4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00f      	beq.n	8005ea2 <TIM_OC5_SetConfig+0x7a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <TIM_OC5_SetConfig+0xb8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <TIM_OC5_SetConfig+0x7a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <TIM_OC5_SetConfig+0xbc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_OC5_SetConfig+0x7a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <TIM_OC5_SetConfig+0xc0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_OC5_SetConfig+0x7a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <TIM_OC5_SetConfig+0xc4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d109      	bne.n	8005eb6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800

08005ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	051b      	lsls	r3, r3, #20
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <TIM_OC6_SetConfig+0xb8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00f      	beq.n	8005f6c <TIM_OC6_SetConfig+0x7c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	; (8005fac <TIM_OC6_SetConfig+0xbc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <TIM_OC6_SetConfig+0x7c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <TIM_OC6_SetConfig+0xc0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_OC6_SetConfig+0x7c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <TIM_OC6_SetConfig+0xc4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_OC6_SetConfig+0x7c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <TIM_OC6_SetConfig+0xc8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d109      	bne.n	8005f80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 030a 	bic.w	r3, r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	031b      	lsls	r3, r3, #12
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	f043 0307 	orr.w	r3, r3, #7
 80060a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	609a      	str	r2, [r3, #8]
}
 80060a8:	bf00      	nop
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	021a      	lsls	r2, r3, #8
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4313      	orrs	r3, r2
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	2201      	movs	r2, #1
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1a      	ldr	r2, [r3, #32]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	43db      	mvns	r3, r3
 8006116:	401a      	ands	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	fa01 f303 	lsl.w	r3, r1, r3
 800612c:	431a      	orrs	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006154:	2302      	movs	r3, #2
 8006156:	e065      	b.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d108      	bne.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006192:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d013      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a17      	ldr	r2, [pc, #92]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a12      	ldr	r2, [pc, #72]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a13      	ldr	r2, [pc, #76]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10c      	bne.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40014000 	.word	0x40014000

08006244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800625c:	2302      	movs	r3, #2
 800625e:	e087      	b.n	8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a27      	ldr	r2, [pc, #156]	; (800637c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a25      	ldr	r2, [pc, #148]	; (8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d106      	bne.n	80062fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1e      	ldr	r2, [pc, #120]	; (800637c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d126      	bne.n	800635e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	051b      	lsls	r3, r3, #20
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0e      	ldr	r2, [pc, #56]	; (800637c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0d      	ldr	r2, [pc, #52]	; (8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d106      	bne.n	800635e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40013400 	.word	0x40013400

08006384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e042      	b.n	800641c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fb fbc7 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2224      	movs	r2, #36	; 0x24
 80063b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f8c2 	bl	8006550 <UART_SetConfig>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e022      	b.n	800641c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fb82 	bl	8006ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc09 	bl	8006c2c <UART_CheckIdleState>
 800641a:	4603      	mov	r3, r0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643a:	2b20      	cmp	r3, #32
 800643c:	f040 8083 	bne.w	8006546 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_UART_Transmit+0x28>
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e07b      	b.n	8006548 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_UART_Transmit+0x3a>
 800645a:	2302      	movs	r3, #2
 800645c:	e074      	b.n	8006548 <HAL_UART_Transmit+0x124>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2221      	movs	r2, #33	; 0x21
 8006472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006476:	f7fb fcb9 	bl	8001dec <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x84>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80064b8:	e02c      	b.n	8006514 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2180      	movs	r1, #128	; 0x80
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fbfc 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e039      	b.n	8006548 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3302      	adds	r3, #2
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e007      	b.n	8006502 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1cc      	bne.n	80064ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2200      	movs	r2, #0
 8006528:	2140      	movs	r1, #64	; 0x40
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fbc9 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e006      	b.n	8006548 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e000      	b.n	8006548 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006546:	2302      	movs	r3, #2
  }
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b08c      	sub	sp, #48	; 0x30
 8006556:	af00      	add	r7, sp, #0
 8006558:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	431a      	orrs	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4bab      	ldr	r3, [pc, #684]	; (800682c <UART_SetConfig+0x2dc>)
 8006580:	4013      	ands	r3, r2
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006588:	430b      	orrs	r3, r1
 800658a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4aa0      	ldr	r2, [pc, #640]	; (8006830 <UART_SetConfig+0x2e0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b8:	4313      	orrs	r3, r2
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	f023 010f 	bic.w	r1, r3, #15
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a91      	ldr	r2, [pc, #580]	; (8006834 <UART_SetConfig+0x2e4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d125      	bne.n	8006640 <UART_SetConfig+0xf0>
 80065f4:	4b90      	ldr	r3, [pc, #576]	; (8006838 <UART_SetConfig+0x2e8>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d81a      	bhi.n	8006638 <UART_SetConfig+0xe8>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0xb8>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	08006619 	.word	0x08006619
 800660c:	08006629 	.word	0x08006629
 8006610:	08006621 	.word	0x08006621
 8006614:	08006631 	.word	0x08006631
 8006618:	2301      	movs	r3, #1
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661e:	e0d6      	b.n	80067ce <UART_SetConfig+0x27e>
 8006620:	2302      	movs	r3, #2
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006626:	e0d2      	b.n	80067ce <UART_SetConfig+0x27e>
 8006628:	2304      	movs	r3, #4
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662e:	e0ce      	b.n	80067ce <UART_SetConfig+0x27e>
 8006630:	2308      	movs	r3, #8
 8006632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006636:	e0ca      	b.n	80067ce <UART_SetConfig+0x27e>
 8006638:	2310      	movs	r3, #16
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663e:	e0c6      	b.n	80067ce <UART_SetConfig+0x27e>
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a7d      	ldr	r2, [pc, #500]	; (800683c <UART_SetConfig+0x2ec>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d138      	bne.n	80066bc <UART_SetConfig+0x16c>
 800664a:	4b7b      	ldr	r3, [pc, #492]	; (8006838 <UART_SetConfig+0x2e8>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b0c      	cmp	r3, #12
 8006656:	d82d      	bhi.n	80066b4 <UART_SetConfig+0x164>
 8006658:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <UART_SetConfig+0x110>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006695 	.word	0x08006695
 8006664:	080066b5 	.word	0x080066b5
 8006668:	080066b5 	.word	0x080066b5
 800666c:	080066b5 	.word	0x080066b5
 8006670:	080066a5 	.word	0x080066a5
 8006674:	080066b5 	.word	0x080066b5
 8006678:	080066b5 	.word	0x080066b5
 800667c:	080066b5 	.word	0x080066b5
 8006680:	0800669d 	.word	0x0800669d
 8006684:	080066b5 	.word	0x080066b5
 8006688:	080066b5 	.word	0x080066b5
 800668c:	080066b5 	.word	0x080066b5
 8006690:	080066ad 	.word	0x080066ad
 8006694:	2300      	movs	r3, #0
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669a:	e098      	b.n	80067ce <UART_SetConfig+0x27e>
 800669c:	2302      	movs	r3, #2
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a2:	e094      	b.n	80067ce <UART_SetConfig+0x27e>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066aa:	e090      	b.n	80067ce <UART_SetConfig+0x27e>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b2:	e08c      	b.n	80067ce <UART_SetConfig+0x27e>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ba:	e088      	b.n	80067ce <UART_SetConfig+0x27e>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a5f      	ldr	r2, [pc, #380]	; (8006840 <UART_SetConfig+0x2f0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d125      	bne.n	8006712 <UART_SetConfig+0x1c2>
 80066c6:	4b5c      	ldr	r3, [pc, #368]	; (8006838 <UART_SetConfig+0x2e8>)
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066d0:	2b30      	cmp	r3, #48	; 0x30
 80066d2:	d016      	beq.n	8006702 <UART_SetConfig+0x1b2>
 80066d4:	2b30      	cmp	r3, #48	; 0x30
 80066d6:	d818      	bhi.n	800670a <UART_SetConfig+0x1ba>
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d00a      	beq.n	80066f2 <UART_SetConfig+0x1a2>
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d814      	bhi.n	800670a <UART_SetConfig+0x1ba>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <UART_SetConfig+0x19a>
 80066e4:	2b10      	cmp	r3, #16
 80066e6:	d008      	beq.n	80066fa <UART_SetConfig+0x1aa>
 80066e8:	e00f      	b.n	800670a <UART_SetConfig+0x1ba>
 80066ea:	2300      	movs	r3, #0
 80066ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f0:	e06d      	b.n	80067ce <UART_SetConfig+0x27e>
 80066f2:	2302      	movs	r3, #2
 80066f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f8:	e069      	b.n	80067ce <UART_SetConfig+0x27e>
 80066fa:	2304      	movs	r3, #4
 80066fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006700:	e065      	b.n	80067ce <UART_SetConfig+0x27e>
 8006702:	2308      	movs	r3, #8
 8006704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006708:	e061      	b.n	80067ce <UART_SetConfig+0x27e>
 800670a:	2310      	movs	r3, #16
 800670c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006710:	e05d      	b.n	80067ce <UART_SetConfig+0x27e>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a4b      	ldr	r2, [pc, #300]	; (8006844 <UART_SetConfig+0x2f4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d125      	bne.n	8006768 <UART_SetConfig+0x218>
 800671c:	4b46      	ldr	r3, [pc, #280]	; (8006838 <UART_SetConfig+0x2e8>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006726:	2bc0      	cmp	r3, #192	; 0xc0
 8006728:	d016      	beq.n	8006758 <UART_SetConfig+0x208>
 800672a:	2bc0      	cmp	r3, #192	; 0xc0
 800672c:	d818      	bhi.n	8006760 <UART_SetConfig+0x210>
 800672e:	2b80      	cmp	r3, #128	; 0x80
 8006730:	d00a      	beq.n	8006748 <UART_SetConfig+0x1f8>
 8006732:	2b80      	cmp	r3, #128	; 0x80
 8006734:	d814      	bhi.n	8006760 <UART_SetConfig+0x210>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <UART_SetConfig+0x1f0>
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d008      	beq.n	8006750 <UART_SetConfig+0x200>
 800673e:	e00f      	b.n	8006760 <UART_SetConfig+0x210>
 8006740:	2300      	movs	r3, #0
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006746:	e042      	b.n	80067ce <UART_SetConfig+0x27e>
 8006748:	2302      	movs	r3, #2
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674e:	e03e      	b.n	80067ce <UART_SetConfig+0x27e>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006756:	e03a      	b.n	80067ce <UART_SetConfig+0x27e>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675e:	e036      	b.n	80067ce <UART_SetConfig+0x27e>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006766:	e032      	b.n	80067ce <UART_SetConfig+0x27e>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a30      	ldr	r2, [pc, #192]	; (8006830 <UART_SetConfig+0x2e0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d12a      	bne.n	80067c8 <UART_SetConfig+0x278>
 8006772:	4b31      	ldr	r3, [pc, #196]	; (8006838 <UART_SetConfig+0x2e8>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800677c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006780:	d01a      	beq.n	80067b8 <UART_SetConfig+0x268>
 8006782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006786:	d81b      	bhi.n	80067c0 <UART_SetConfig+0x270>
 8006788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678c:	d00c      	beq.n	80067a8 <UART_SetConfig+0x258>
 800678e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006792:	d815      	bhi.n	80067c0 <UART_SetConfig+0x270>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <UART_SetConfig+0x250>
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679c:	d008      	beq.n	80067b0 <UART_SetConfig+0x260>
 800679e:	e00f      	b.n	80067c0 <UART_SetConfig+0x270>
 80067a0:	2300      	movs	r3, #0
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a6:	e012      	b.n	80067ce <UART_SetConfig+0x27e>
 80067a8:	2302      	movs	r3, #2
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ae:	e00e      	b.n	80067ce <UART_SetConfig+0x27e>
 80067b0:	2304      	movs	r3, #4
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b6:	e00a      	b.n	80067ce <UART_SetConfig+0x27e>
 80067b8:	2308      	movs	r3, #8
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067be:	e006      	b.n	80067ce <UART_SetConfig+0x27e>
 80067c0:	2310      	movs	r3, #16
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c6:	e002      	b.n	80067ce <UART_SetConfig+0x27e>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a17      	ldr	r2, [pc, #92]	; (8006830 <UART_SetConfig+0x2e0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	f040 80a8 	bne.w	800692a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d834      	bhi.n	800684c <UART_SetConfig+0x2fc>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x298>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	0800684d 	.word	0x0800684d
 80067f0:	08006815 	.word	0x08006815
 80067f4:	0800684d 	.word	0x0800684d
 80067f8:	0800681b 	.word	0x0800681b
 80067fc:	0800684d 	.word	0x0800684d
 8006800:	0800684d 	.word	0x0800684d
 8006804:	0800684d 	.word	0x0800684d
 8006808:	08006823 	.word	0x08006823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe f91a 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8006810:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006812:	e021      	b.n	8006858 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006814:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <UART_SetConfig+0x2f8>)
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006818:	e01e      	b.n	8006858 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681a:	f7fe f8a5 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006820:	e01a      	b.n	8006858 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006828:	e016      	b.n	8006858 <UART_SetConfig+0x308>
 800682a:	bf00      	nop
 800682c:	cfff69f3 	.word	0xcfff69f3
 8006830:	40008000 	.word	0x40008000
 8006834:	40013800 	.word	0x40013800
 8006838:	40021000 	.word	0x40021000
 800683c:	40004400 	.word	0x40004400
 8006840:	40004800 	.word	0x40004800
 8006844:	40004c00 	.word	0x40004c00
 8006848:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006856:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 812a 	beq.w	8006ab4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	4a9e      	ldr	r2, [pc, #632]	; (8006ae0 <UART_SetConfig+0x590>)
 8006866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800686a:	461a      	mov	r2, r3
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006872:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	4413      	add	r3, r2
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	429a      	cmp	r2, r3
 8006882:	d305      	bcc.n	8006890 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006896:	e10d      	b.n	8006ab4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	2200      	movs	r2, #0
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	60fa      	str	r2, [r7, #12]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	4a8e      	ldr	r2, [pc, #568]	; (8006ae0 <UART_SetConfig+0x590>)
 80068a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2200      	movs	r2, #0
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068ba:	f7fa f89f 	bl	80009fc <__aeabi_uldivmod>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	020b      	lsls	r3, r1, #8
 80068d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068d4:	0202      	lsls	r2, r0, #8
 80068d6:	6979      	ldr	r1, [r7, #20]
 80068d8:	6849      	ldr	r1, [r1, #4]
 80068da:	0849      	lsrs	r1, r1, #1
 80068dc:	2000      	movs	r0, #0
 80068de:	460c      	mov	r4, r1
 80068e0:	4605      	mov	r5, r0
 80068e2:	eb12 0804 	adds.w	r8, r2, r4
 80068e6:	eb43 0905 	adc.w	r9, r3, r5
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	469a      	mov	sl, r3
 80068f2:	4693      	mov	fp, r2
 80068f4:	4652      	mov	r2, sl
 80068f6:	465b      	mov	r3, fp
 80068f8:	4640      	mov	r0, r8
 80068fa:	4649      	mov	r1, r9
 80068fc:	f7fa f87e 	bl	80009fc <__aeabi_uldivmod>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4613      	mov	r3, r2
 8006906:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690e:	d308      	bcc.n	8006922 <UART_SetConfig+0x3d2>
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006916:	d204      	bcs.n	8006922 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	60da      	str	r2, [r3, #12]
 8006920:	e0c8      	b.n	8006ab4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006928:	e0c4      	b.n	8006ab4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006932:	d167      	bne.n	8006a04 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006938:	2b08      	cmp	r3, #8
 800693a:	d828      	bhi.n	800698e <UART_SetConfig+0x43e>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0x3f4>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006969 	.word	0x08006969
 8006948:	08006971 	.word	0x08006971
 800694c:	08006979 	.word	0x08006979
 8006950:	0800698f 	.word	0x0800698f
 8006954:	0800697f 	.word	0x0800697f
 8006958:	0800698f 	.word	0x0800698f
 800695c:	0800698f 	.word	0x0800698f
 8006960:	0800698f 	.word	0x0800698f
 8006964:	08006987 	.word	0x08006987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006968:	f7fe f86c 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 800696c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800696e:	e014      	b.n	800699a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006970:	f7fe f87e 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 8006974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006976:	e010      	b.n	800699a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006978:	4b5a      	ldr	r3, [pc, #360]	; (8006ae4 <UART_SetConfig+0x594>)
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800697c:	e00d      	b.n	800699a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800697e:	f7fd fff3 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8006982:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006984:	e009      	b.n	800699a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800698c:	e005      	b.n	800699a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8089 	beq.w	8006ab4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	4a4e      	ldr	r2, [pc, #312]	; (8006ae0 <UART_SetConfig+0x590>)
 80069a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b4:	005a      	lsls	r2, r3, #1
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	441a      	add	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	2b0f      	cmp	r3, #15
 80069cc:	d916      	bls.n	80069fc <UART_SetConfig+0x4ac>
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d4:	d212      	bcs.n	80069fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f023 030f 	bic.w	r3, r3, #15
 80069de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	8bfb      	ldrh	r3, [r7, #30]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	8bfa      	ldrh	r2, [r7, #30]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	e05b      	b.n	8006ab4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a02:	e057      	b.n	8006ab4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d828      	bhi.n	8006a5e <UART_SetConfig+0x50e>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0x4c4>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a49 	.word	0x08006a49
 8006a20:	08006a5f 	.word	0x08006a5f
 8006a24:	08006a4f 	.word	0x08006a4f
 8006a28:	08006a5f 	.word	0x08006a5f
 8006a2c:	08006a5f 	.word	0x08006a5f
 8006a30:	08006a5f 	.word	0x08006a5f
 8006a34:	08006a57 	.word	0x08006a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fe f804 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a3e:	e014      	b.n	8006a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a40:	f7fe f816 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 8006a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a46:	e010      	b.n	8006a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a48:	4b26      	ldr	r3, [pc, #152]	; (8006ae4 <UART_SetConfig+0x594>)
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a4c:	e00d      	b.n	8006a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a4e:	f7fd ff8b 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8006a52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a54:	e009      	b.n	8006a6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a5c:	e005      	b.n	8006a6a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a68:	bf00      	nop
    }

    if (pclk != 0U)
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d021      	beq.n	8006ab4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	4a1a      	ldr	r2, [pc, #104]	; (8006ae0 <UART_SetConfig+0x590>)
 8006a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	441a      	add	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	2b0f      	cmp	r3, #15
 8006a98:	d909      	bls.n	8006aae <UART_SetConfig+0x55e>
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa0:	d205      	bcs.n	8006aae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60da      	str	r2, [r3, #12]
 8006aac:	e002      	b.n	8006ab4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2200      	movs	r2, #0
 8006ace:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ad0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3730      	adds	r7, #48	; 0x30
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ade:	bf00      	nop
 8006ae0:	08007a2c 	.word	0x08007a2c
 8006ae4:	00f42400 	.word	0x00f42400

08006ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006be6:	d10a      	bne.n	8006bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c3c:	f7fb f8d6 	bl	8001dec <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d10e      	bne.n	8006c6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f82f 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e025      	b.n	8006cba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d10e      	bne.n	8006c9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f819 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e00f      	b.n	8006cba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b09c      	sub	sp, #112	; 0x70
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd2:	e0a9      	b.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	f000 80a5 	beq.w	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cde:	f7fb f885 	bl	8001dec <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d302      	bcc.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d140      	bne.n	8006d76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d08:	667b      	str	r3, [r7, #100]	; 0x64
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e5      	bne.n	8006d26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e069      	b.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d051      	beq.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d92:	d149      	bne.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e6      	bne.n	8006d9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	613b      	str	r3, [r7, #16]
   return(result);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3308      	adds	r3, #8
 8006dee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006df0:	623a      	str	r2, [r7, #32]
 8006df2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	69f9      	ldr	r1, [r7, #28]
 8006df6:	6a3a      	ldr	r2, [r7, #32]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e5      	bne.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e010      	b.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69da      	ldr	r2, [r3, #28]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4013      	ands	r3, r2
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f43f af46 	beq.w	8006cd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3770      	adds	r7, #112	; 0x70
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e027      	b.n	8006eb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2224      	movs	r2, #36	; 0x24
 8006e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e02d      	b.n	8006f38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2224      	movs	r2, #36	; 0x24
 8006ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f84f 	bl	8006fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e02d      	b.n	8006fb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2224      	movs	r2, #36	; 0x24
 8006f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f811 	bl	8006fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fdc:	e031      	b.n	8007042 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fde:	2308      	movs	r3, #8
 8006fe0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	0e5b      	lsrs	r3, r3, #25
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	0f5b      	lsrs	r3, r3, #29
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	7b3a      	ldrb	r2, [r7, #12]
 800700a:	4911      	ldr	r1, [pc, #68]	; (8007050 <UARTEx_SetNbDataToProcess+0x94>)
 800700c:	5c8a      	ldrb	r2, [r1, r2]
 800700e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007012:	7b3a      	ldrb	r2, [r7, #12]
 8007014:	490f      	ldr	r1, [pc, #60]	; (8007054 <UARTEx_SetNbDataToProcess+0x98>)
 8007016:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007018:	fb93 f3f2 	sdiv	r3, r3, r2
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	7b7a      	ldrb	r2, [r7, #13]
 8007028:	4909      	ldr	r1, [pc, #36]	; (8007050 <UARTEx_SetNbDataToProcess+0x94>)
 800702a:	5c8a      	ldrb	r2, [r1, r2]
 800702c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007030:	7b7a      	ldrb	r2, [r7, #13]
 8007032:	4908      	ldr	r1, [pc, #32]	; (8007054 <UARTEx_SetNbDataToProcess+0x98>)
 8007034:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007036:	fb93 f3f2 	sdiv	r3, r3, r2
 800703a:	b29a      	uxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	08007a44 	.word	0x08007a44
 8007054:	08007a4c 	.word	0x08007a4c

08007058 <__errno>:
 8007058:	4b01      	ldr	r3, [pc, #4]	; (8007060 <__errno+0x8>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	2000000c 	.word	0x2000000c

08007064 <__libc_init_array>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4d0d      	ldr	r5, [pc, #52]	; (800709c <__libc_init_array+0x38>)
 8007068:	4c0d      	ldr	r4, [pc, #52]	; (80070a0 <__libc_init_array+0x3c>)
 800706a:	1b64      	subs	r4, r4, r5
 800706c:	10a4      	asrs	r4, r4, #2
 800706e:	2600      	movs	r6, #0
 8007070:	42a6      	cmp	r6, r4
 8007072:	d109      	bne.n	8007088 <__libc_init_array+0x24>
 8007074:	4d0b      	ldr	r5, [pc, #44]	; (80070a4 <__libc_init_array+0x40>)
 8007076:	4c0c      	ldr	r4, [pc, #48]	; (80070a8 <__libc_init_array+0x44>)
 8007078:	f000 fc9c 	bl	80079b4 <_init>
 800707c:	1b64      	subs	r4, r4, r5
 800707e:	10a4      	asrs	r4, r4, #2
 8007080:	2600      	movs	r6, #0
 8007082:	42a6      	cmp	r6, r4
 8007084:	d105      	bne.n	8007092 <__libc_init_array+0x2e>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	f855 3b04 	ldr.w	r3, [r5], #4
 800708c:	4798      	blx	r3
 800708e:	3601      	adds	r6, #1
 8007090:	e7ee      	b.n	8007070 <__libc_init_array+0xc>
 8007092:	f855 3b04 	ldr.w	r3, [r5], #4
 8007096:	4798      	blx	r3
 8007098:	3601      	adds	r6, #1
 800709a:	e7f2      	b.n	8007082 <__libc_init_array+0x1e>
 800709c:	08007a90 	.word	0x08007a90
 80070a0:	08007a90 	.word	0x08007a90
 80070a4:	08007a90 	.word	0x08007a90
 80070a8:	08007a94 	.word	0x08007a94

080070ac <memset>:
 80070ac:	4402      	add	r2, r0
 80070ae:	4603      	mov	r3, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <siprintf>:
 80070bc:	b40e      	push	{r1, r2, r3}
 80070be:	b500      	push	{lr}
 80070c0:	b09c      	sub	sp, #112	; 0x70
 80070c2:	ab1d      	add	r3, sp, #116	; 0x74
 80070c4:	9002      	str	r0, [sp, #8]
 80070c6:	9006      	str	r0, [sp, #24]
 80070c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070cc:	4809      	ldr	r0, [pc, #36]	; (80070f4 <siprintf+0x38>)
 80070ce:	9107      	str	r1, [sp, #28]
 80070d0:	9104      	str	r1, [sp, #16]
 80070d2:	4909      	ldr	r1, [pc, #36]	; (80070f8 <siprintf+0x3c>)
 80070d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d8:	9105      	str	r1, [sp, #20]
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	a902      	add	r1, sp, #8
 80070e0:	f000 f876 	bl	80071d0 <_svfiprintf_r>
 80070e4:	9b02      	ldr	r3, [sp, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	b01c      	add	sp, #112	; 0x70
 80070ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f0:	b003      	add	sp, #12
 80070f2:	4770      	bx	lr
 80070f4:	2000000c 	.word	0x2000000c
 80070f8:	ffff0208 	.word	0xffff0208

080070fc <strcat>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	4602      	mov	r2, r0
 8007100:	7814      	ldrb	r4, [r2, #0]
 8007102:	4613      	mov	r3, r2
 8007104:	3201      	adds	r2, #1
 8007106:	2c00      	cmp	r4, #0
 8007108:	d1fa      	bne.n	8007100 <strcat+0x4>
 800710a:	3b01      	subs	r3, #1
 800710c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007110:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007114:	2a00      	cmp	r2, #0
 8007116:	d1f9      	bne.n	800710c <strcat+0x10>
 8007118:	bd10      	pop	{r4, pc}

0800711a <__ssputs_r>:
 800711a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711e:	688e      	ldr	r6, [r1, #8]
 8007120:	429e      	cmp	r6, r3
 8007122:	4682      	mov	sl, r0
 8007124:	460c      	mov	r4, r1
 8007126:	4690      	mov	r8, r2
 8007128:	461f      	mov	r7, r3
 800712a:	d838      	bhi.n	800719e <__ssputs_r+0x84>
 800712c:	898a      	ldrh	r2, [r1, #12]
 800712e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007132:	d032      	beq.n	800719a <__ssputs_r+0x80>
 8007134:	6825      	ldr	r5, [r4, #0]
 8007136:	6909      	ldr	r1, [r1, #16]
 8007138:	eba5 0901 	sub.w	r9, r5, r1
 800713c:	6965      	ldr	r5, [r4, #20]
 800713e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007142:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007146:	3301      	adds	r3, #1
 8007148:	444b      	add	r3, r9
 800714a:	106d      	asrs	r5, r5, #1
 800714c:	429d      	cmp	r5, r3
 800714e:	bf38      	it	cc
 8007150:	461d      	movcc	r5, r3
 8007152:	0553      	lsls	r3, r2, #21
 8007154:	d531      	bpl.n	80071ba <__ssputs_r+0xa0>
 8007156:	4629      	mov	r1, r5
 8007158:	f000 fb62 	bl	8007820 <_malloc_r>
 800715c:	4606      	mov	r6, r0
 800715e:	b950      	cbnz	r0, 8007176 <__ssputs_r+0x5c>
 8007160:	230c      	movs	r3, #12
 8007162:	f8ca 3000 	str.w	r3, [sl]
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	f04f 30ff 	mov.w	r0, #4294967295
 8007172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007176:	6921      	ldr	r1, [r4, #16]
 8007178:	464a      	mov	r2, r9
 800717a:	f000 fabd 	bl	80076f8 <memcpy>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	6126      	str	r6, [r4, #16]
 800718c:	6165      	str	r5, [r4, #20]
 800718e:	444e      	add	r6, r9
 8007190:	eba5 0509 	sub.w	r5, r5, r9
 8007194:	6026      	str	r6, [r4, #0]
 8007196:	60a5      	str	r5, [r4, #8]
 8007198:	463e      	mov	r6, r7
 800719a:	42be      	cmp	r6, r7
 800719c:	d900      	bls.n	80071a0 <__ssputs_r+0x86>
 800719e:	463e      	mov	r6, r7
 80071a0:	6820      	ldr	r0, [r4, #0]
 80071a2:	4632      	mov	r2, r6
 80071a4:	4641      	mov	r1, r8
 80071a6:	f000 fab5 	bl	8007714 <memmove>
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	1b9b      	subs	r3, r3, r6
 80071ae:	60a3      	str	r3, [r4, #8]
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	4433      	add	r3, r6
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	2000      	movs	r0, #0
 80071b8:	e7db      	b.n	8007172 <__ssputs_r+0x58>
 80071ba:	462a      	mov	r2, r5
 80071bc:	f000 fba4 	bl	8007908 <_realloc_r>
 80071c0:	4606      	mov	r6, r0
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d1e1      	bne.n	800718a <__ssputs_r+0x70>
 80071c6:	6921      	ldr	r1, [r4, #16]
 80071c8:	4650      	mov	r0, sl
 80071ca:	f000 fabd 	bl	8007748 <_free_r>
 80071ce:	e7c7      	b.n	8007160 <__ssputs_r+0x46>

080071d0 <_svfiprintf_r>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	4698      	mov	r8, r3
 80071d6:	898b      	ldrh	r3, [r1, #12]
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	b09d      	sub	sp, #116	; 0x74
 80071dc:	4607      	mov	r7, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	d50e      	bpl.n	8007202 <_svfiprintf_r+0x32>
 80071e4:	690b      	ldr	r3, [r1, #16]
 80071e6:	b963      	cbnz	r3, 8007202 <_svfiprintf_r+0x32>
 80071e8:	2140      	movs	r1, #64	; 0x40
 80071ea:	f000 fb19 	bl	8007820 <_malloc_r>
 80071ee:	6028      	str	r0, [r5, #0]
 80071f0:	6128      	str	r0, [r5, #16]
 80071f2:	b920      	cbnz	r0, 80071fe <_svfiprintf_r+0x2e>
 80071f4:	230c      	movs	r3, #12
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e0d1      	b.n	80073a2 <_svfiprintf_r+0x1d2>
 80071fe:	2340      	movs	r3, #64	; 0x40
 8007200:	616b      	str	r3, [r5, #20]
 8007202:	2300      	movs	r3, #0
 8007204:	9309      	str	r3, [sp, #36]	; 0x24
 8007206:	2320      	movs	r3, #32
 8007208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800720c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007210:	2330      	movs	r3, #48	; 0x30
 8007212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073bc <_svfiprintf_r+0x1ec>
 8007216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721a:	f04f 0901 	mov.w	r9, #1
 800721e:	4623      	mov	r3, r4
 8007220:	469a      	mov	sl, r3
 8007222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007226:	b10a      	cbz	r2, 800722c <_svfiprintf_r+0x5c>
 8007228:	2a25      	cmp	r2, #37	; 0x25
 800722a:	d1f9      	bne.n	8007220 <_svfiprintf_r+0x50>
 800722c:	ebba 0b04 	subs.w	fp, sl, r4
 8007230:	d00b      	beq.n	800724a <_svfiprintf_r+0x7a>
 8007232:	465b      	mov	r3, fp
 8007234:	4622      	mov	r2, r4
 8007236:	4629      	mov	r1, r5
 8007238:	4638      	mov	r0, r7
 800723a:	f7ff ff6e 	bl	800711a <__ssputs_r>
 800723e:	3001      	adds	r0, #1
 8007240:	f000 80aa 	beq.w	8007398 <_svfiprintf_r+0x1c8>
 8007244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007246:	445a      	add	r2, fp
 8007248:	9209      	str	r2, [sp, #36]	; 0x24
 800724a:	f89a 3000 	ldrb.w	r3, [sl]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80a2 	beq.w	8007398 <_svfiprintf_r+0x1c8>
 8007254:	2300      	movs	r3, #0
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800725e:	f10a 0a01 	add.w	sl, sl, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	9307      	str	r3, [sp, #28]
 8007266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726a:	931a      	str	r3, [sp, #104]	; 0x68
 800726c:	4654      	mov	r4, sl
 800726e:	2205      	movs	r2, #5
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	4851      	ldr	r0, [pc, #324]	; (80073bc <_svfiprintf_r+0x1ec>)
 8007276:	f7f8 ffdb 	bl	8000230 <memchr>
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	b9d8      	cbnz	r0, 80072b6 <_svfiprintf_r+0xe6>
 800727e:	06d0      	lsls	r0, r2, #27
 8007280:	bf44      	itt	mi
 8007282:	2320      	movmi	r3, #32
 8007284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007288:	0711      	lsls	r1, r2, #28
 800728a:	bf44      	itt	mi
 800728c:	232b      	movmi	r3, #43	; 0x2b
 800728e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007292:	f89a 3000 	ldrb.w	r3, [sl]
 8007296:	2b2a      	cmp	r3, #42	; 0x2a
 8007298:	d015      	beq.n	80072c6 <_svfiprintf_r+0xf6>
 800729a:	9a07      	ldr	r2, [sp, #28]
 800729c:	4654      	mov	r4, sl
 800729e:	2000      	movs	r0, #0
 80072a0:	f04f 0c0a 	mov.w	ip, #10
 80072a4:	4621      	mov	r1, r4
 80072a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072aa:	3b30      	subs	r3, #48	; 0x30
 80072ac:	2b09      	cmp	r3, #9
 80072ae:	d94e      	bls.n	800734e <_svfiprintf_r+0x17e>
 80072b0:	b1b0      	cbz	r0, 80072e0 <_svfiprintf_r+0x110>
 80072b2:	9207      	str	r2, [sp, #28]
 80072b4:	e014      	b.n	80072e0 <_svfiprintf_r+0x110>
 80072b6:	eba0 0308 	sub.w	r3, r0, r8
 80072ba:	fa09 f303 	lsl.w	r3, r9, r3
 80072be:	4313      	orrs	r3, r2
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	46a2      	mov	sl, r4
 80072c4:	e7d2      	b.n	800726c <_svfiprintf_r+0x9c>
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	1d19      	adds	r1, r3, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	9103      	str	r1, [sp, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bfbb      	ittet	lt
 80072d2:	425b      	neglt	r3, r3
 80072d4:	f042 0202 	orrlt.w	r2, r2, #2
 80072d8:	9307      	strge	r3, [sp, #28]
 80072da:	9307      	strlt	r3, [sp, #28]
 80072dc:	bfb8      	it	lt
 80072de:	9204      	strlt	r2, [sp, #16]
 80072e0:	7823      	ldrb	r3, [r4, #0]
 80072e2:	2b2e      	cmp	r3, #46	; 0x2e
 80072e4:	d10c      	bne.n	8007300 <_svfiprintf_r+0x130>
 80072e6:	7863      	ldrb	r3, [r4, #1]
 80072e8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ea:	d135      	bne.n	8007358 <_svfiprintf_r+0x188>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	1d1a      	adds	r2, r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	9203      	str	r2, [sp, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfb8      	it	lt
 80072f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80072fc:	3402      	adds	r4, #2
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073cc <_svfiprintf_r+0x1fc>
 8007304:	7821      	ldrb	r1, [r4, #0]
 8007306:	2203      	movs	r2, #3
 8007308:	4650      	mov	r0, sl
 800730a:	f7f8 ff91 	bl	8000230 <memchr>
 800730e:	b140      	cbz	r0, 8007322 <_svfiprintf_r+0x152>
 8007310:	2340      	movs	r3, #64	; 0x40
 8007312:	eba0 000a 	sub.w	r0, r0, sl
 8007316:	fa03 f000 	lsl.w	r0, r3, r0
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	4303      	orrs	r3, r0
 800731e:	3401      	adds	r4, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4826      	ldr	r0, [pc, #152]	; (80073c0 <_svfiprintf_r+0x1f0>)
 8007328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732c:	2206      	movs	r2, #6
 800732e:	f7f8 ff7f 	bl	8000230 <memchr>
 8007332:	2800      	cmp	r0, #0
 8007334:	d038      	beq.n	80073a8 <_svfiprintf_r+0x1d8>
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <_svfiprintf_r+0x1f4>)
 8007338:	bb1b      	cbnz	r3, 8007382 <_svfiprintf_r+0x1b2>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	3308      	adds	r3, #8
 8007344:	9303      	str	r3, [sp, #12]
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	4433      	add	r3, r6
 800734a:	9309      	str	r3, [sp, #36]	; 0x24
 800734c:	e767      	b.n	800721e <_svfiprintf_r+0x4e>
 800734e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007352:	460c      	mov	r4, r1
 8007354:	2001      	movs	r0, #1
 8007356:	e7a5      	b.n	80072a4 <_svfiprintf_r+0xd4>
 8007358:	2300      	movs	r3, #0
 800735a:	3401      	adds	r4, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4619      	mov	r1, r3
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4620      	mov	r0, r4
 8007366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736a:	3a30      	subs	r2, #48	; 0x30
 800736c:	2a09      	cmp	r2, #9
 800736e:	d903      	bls.n	8007378 <_svfiprintf_r+0x1a8>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0c5      	beq.n	8007300 <_svfiprintf_r+0x130>
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	e7c3      	b.n	8007300 <_svfiprintf_r+0x130>
 8007378:	fb0c 2101 	mla	r1, ip, r1, r2
 800737c:	4604      	mov	r4, r0
 800737e:	2301      	movs	r3, #1
 8007380:	e7f0      	b.n	8007364 <_svfiprintf_r+0x194>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <_svfiprintf_r+0x1f8>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4638      	mov	r0, r7
 800738e:	f3af 8000 	nop.w
 8007392:	1c42      	adds	r2, r0, #1
 8007394:	4606      	mov	r6, r0
 8007396:	d1d6      	bne.n	8007346 <_svfiprintf_r+0x176>
 8007398:	89ab      	ldrh	r3, [r5, #12]
 800739a:	065b      	lsls	r3, r3, #25
 800739c:	f53f af2c 	bmi.w	80071f8 <_svfiprintf_r+0x28>
 80073a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a2:	b01d      	add	sp, #116	; 0x74
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	462a      	mov	r2, r5
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <_svfiprintf_r+0x1f8>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	4638      	mov	r0, r7
 80073b4:	f000 f87a 	bl	80074ac <_printf_i>
 80073b8:	e7eb      	b.n	8007392 <_svfiprintf_r+0x1c2>
 80073ba:	bf00      	nop
 80073bc:	08007a54 	.word	0x08007a54
 80073c0:	08007a5e 	.word	0x08007a5e
 80073c4:	00000000 	.word	0x00000000
 80073c8:	0800711b 	.word	0x0800711b
 80073cc:	08007a5a 	.word	0x08007a5a

080073d0 <_printf_common>:
 80073d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	4616      	mov	r6, r2
 80073d6:	4699      	mov	r9, r3
 80073d8:	688a      	ldr	r2, [r1, #8]
 80073da:	690b      	ldr	r3, [r1, #16]
 80073dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e0:	4293      	cmp	r3, r2
 80073e2:	bfb8      	it	lt
 80073e4:	4613      	movlt	r3, r2
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073ec:	4607      	mov	r7, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	b10a      	cbz	r2, 80073f6 <_printf_common+0x26>
 80073f2:	3301      	adds	r3, #1
 80073f4:	6033      	str	r3, [r6, #0]
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	0699      	lsls	r1, r3, #26
 80073fa:	bf42      	ittt	mi
 80073fc:	6833      	ldrmi	r3, [r6, #0]
 80073fe:	3302      	addmi	r3, #2
 8007400:	6033      	strmi	r3, [r6, #0]
 8007402:	6825      	ldr	r5, [r4, #0]
 8007404:	f015 0506 	ands.w	r5, r5, #6
 8007408:	d106      	bne.n	8007418 <_printf_common+0x48>
 800740a:	f104 0a19 	add.w	sl, r4, #25
 800740e:	68e3      	ldr	r3, [r4, #12]
 8007410:	6832      	ldr	r2, [r6, #0]
 8007412:	1a9b      	subs	r3, r3, r2
 8007414:	42ab      	cmp	r3, r5
 8007416:	dc26      	bgt.n	8007466 <_printf_common+0x96>
 8007418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800741c:	1e13      	subs	r3, r2, #0
 800741e:	6822      	ldr	r2, [r4, #0]
 8007420:	bf18      	it	ne
 8007422:	2301      	movne	r3, #1
 8007424:	0692      	lsls	r2, r2, #26
 8007426:	d42b      	bmi.n	8007480 <_printf_common+0xb0>
 8007428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800742c:	4649      	mov	r1, r9
 800742e:	4638      	mov	r0, r7
 8007430:	47c0      	blx	r8
 8007432:	3001      	adds	r0, #1
 8007434:	d01e      	beq.n	8007474 <_printf_common+0xa4>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	68e5      	ldr	r5, [r4, #12]
 800743a:	6832      	ldr	r2, [r6, #0]
 800743c:	f003 0306 	and.w	r3, r3, #6
 8007440:	2b04      	cmp	r3, #4
 8007442:	bf08      	it	eq
 8007444:	1aad      	subeq	r5, r5, r2
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	6922      	ldr	r2, [r4, #16]
 800744a:	bf0c      	ite	eq
 800744c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007450:	2500      	movne	r5, #0
 8007452:	4293      	cmp	r3, r2
 8007454:	bfc4      	itt	gt
 8007456:	1a9b      	subgt	r3, r3, r2
 8007458:	18ed      	addgt	r5, r5, r3
 800745a:	2600      	movs	r6, #0
 800745c:	341a      	adds	r4, #26
 800745e:	42b5      	cmp	r5, r6
 8007460:	d11a      	bne.n	8007498 <_printf_common+0xc8>
 8007462:	2000      	movs	r0, #0
 8007464:	e008      	b.n	8007478 <_printf_common+0xa8>
 8007466:	2301      	movs	r3, #1
 8007468:	4652      	mov	r2, sl
 800746a:	4649      	mov	r1, r9
 800746c:	4638      	mov	r0, r7
 800746e:	47c0      	blx	r8
 8007470:	3001      	adds	r0, #1
 8007472:	d103      	bne.n	800747c <_printf_common+0xac>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747c:	3501      	adds	r5, #1
 800747e:	e7c6      	b.n	800740e <_printf_common+0x3e>
 8007480:	18e1      	adds	r1, r4, r3
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	2030      	movs	r0, #48	; 0x30
 8007486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800748a:	4422      	add	r2, r4
 800748c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007494:	3302      	adds	r3, #2
 8007496:	e7c7      	b.n	8007428 <_printf_common+0x58>
 8007498:	2301      	movs	r3, #1
 800749a:	4622      	mov	r2, r4
 800749c:	4649      	mov	r1, r9
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	3001      	adds	r0, #1
 80074a4:	d0e6      	beq.n	8007474 <_printf_common+0xa4>
 80074a6:	3601      	adds	r6, #1
 80074a8:	e7d9      	b.n	800745e <_printf_common+0x8e>
	...

080074ac <_printf_i>:
 80074ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	7e0f      	ldrb	r7, [r1, #24]
 80074b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b4:	2f78      	cmp	r7, #120	; 0x78
 80074b6:	4691      	mov	r9, r2
 80074b8:	4680      	mov	r8, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	469a      	mov	sl, r3
 80074be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074c2:	d807      	bhi.n	80074d4 <_printf_i+0x28>
 80074c4:	2f62      	cmp	r7, #98	; 0x62
 80074c6:	d80a      	bhi.n	80074de <_printf_i+0x32>
 80074c8:	2f00      	cmp	r7, #0
 80074ca:	f000 80d8 	beq.w	800767e <_printf_i+0x1d2>
 80074ce:	2f58      	cmp	r7, #88	; 0x58
 80074d0:	f000 80a3 	beq.w	800761a <_printf_i+0x16e>
 80074d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074dc:	e03a      	b.n	8007554 <_printf_i+0xa8>
 80074de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074e2:	2b15      	cmp	r3, #21
 80074e4:	d8f6      	bhi.n	80074d4 <_printf_i+0x28>
 80074e6:	a101      	add	r1, pc, #4	; (adr r1, 80074ec <_printf_i+0x40>)
 80074e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074ec:	08007545 	.word	0x08007545
 80074f0:	08007559 	.word	0x08007559
 80074f4:	080074d5 	.word	0x080074d5
 80074f8:	080074d5 	.word	0x080074d5
 80074fc:	080074d5 	.word	0x080074d5
 8007500:	080074d5 	.word	0x080074d5
 8007504:	08007559 	.word	0x08007559
 8007508:	080074d5 	.word	0x080074d5
 800750c:	080074d5 	.word	0x080074d5
 8007510:	080074d5 	.word	0x080074d5
 8007514:	080074d5 	.word	0x080074d5
 8007518:	08007665 	.word	0x08007665
 800751c:	08007589 	.word	0x08007589
 8007520:	08007647 	.word	0x08007647
 8007524:	080074d5 	.word	0x080074d5
 8007528:	080074d5 	.word	0x080074d5
 800752c:	08007687 	.word	0x08007687
 8007530:	080074d5 	.word	0x080074d5
 8007534:	08007589 	.word	0x08007589
 8007538:	080074d5 	.word	0x080074d5
 800753c:	080074d5 	.word	0x080074d5
 8007540:	0800764f 	.word	0x0800764f
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	1d1a      	adds	r2, r3, #4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	602a      	str	r2, [r5, #0]
 800754c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007554:	2301      	movs	r3, #1
 8007556:	e0a3      	b.n	80076a0 <_printf_i+0x1f4>
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	6829      	ldr	r1, [r5, #0]
 800755c:	0606      	lsls	r6, r0, #24
 800755e:	f101 0304 	add.w	r3, r1, #4
 8007562:	d50a      	bpl.n	800757a <_printf_i+0xce>
 8007564:	680e      	ldr	r6, [r1, #0]
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	2e00      	cmp	r6, #0
 800756a:	da03      	bge.n	8007574 <_printf_i+0xc8>
 800756c:	232d      	movs	r3, #45	; 0x2d
 800756e:	4276      	negs	r6, r6
 8007570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007574:	485e      	ldr	r0, [pc, #376]	; (80076f0 <_printf_i+0x244>)
 8007576:	230a      	movs	r3, #10
 8007578:	e019      	b.n	80075ae <_printf_i+0x102>
 800757a:	680e      	ldr	r6, [r1, #0]
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007582:	bf18      	it	ne
 8007584:	b236      	sxthne	r6, r6
 8007586:	e7ef      	b.n	8007568 <_printf_i+0xbc>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	1d19      	adds	r1, r3, #4
 800758e:	6029      	str	r1, [r5, #0]
 8007590:	0601      	lsls	r1, r0, #24
 8007592:	d501      	bpl.n	8007598 <_printf_i+0xec>
 8007594:	681e      	ldr	r6, [r3, #0]
 8007596:	e002      	b.n	800759e <_printf_i+0xf2>
 8007598:	0646      	lsls	r6, r0, #25
 800759a:	d5fb      	bpl.n	8007594 <_printf_i+0xe8>
 800759c:	881e      	ldrh	r6, [r3, #0]
 800759e:	4854      	ldr	r0, [pc, #336]	; (80076f0 <_printf_i+0x244>)
 80075a0:	2f6f      	cmp	r7, #111	; 0x6f
 80075a2:	bf0c      	ite	eq
 80075a4:	2308      	moveq	r3, #8
 80075a6:	230a      	movne	r3, #10
 80075a8:	2100      	movs	r1, #0
 80075aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ae:	6865      	ldr	r5, [r4, #4]
 80075b0:	60a5      	str	r5, [r4, #8]
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	bfa2      	ittt	ge
 80075b6:	6821      	ldrge	r1, [r4, #0]
 80075b8:	f021 0104 	bicge.w	r1, r1, #4
 80075bc:	6021      	strge	r1, [r4, #0]
 80075be:	b90e      	cbnz	r6, 80075c4 <_printf_i+0x118>
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	d04d      	beq.n	8007660 <_printf_i+0x1b4>
 80075c4:	4615      	mov	r5, r2
 80075c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ca:	fb03 6711 	mls	r7, r3, r1, r6
 80075ce:	5dc7      	ldrb	r7, [r0, r7]
 80075d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075d4:	4637      	mov	r7, r6
 80075d6:	42bb      	cmp	r3, r7
 80075d8:	460e      	mov	r6, r1
 80075da:	d9f4      	bls.n	80075c6 <_printf_i+0x11a>
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d10b      	bne.n	80075f8 <_printf_i+0x14c>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	07de      	lsls	r6, r3, #31
 80075e4:	d508      	bpl.n	80075f8 <_printf_i+0x14c>
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	4299      	cmp	r1, r3
 80075ec:	bfde      	ittt	le
 80075ee:	2330      	movle	r3, #48	; 0x30
 80075f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f8:	1b52      	subs	r2, r2, r5
 80075fa:	6122      	str	r2, [r4, #16]
 80075fc:	f8cd a000 	str.w	sl, [sp]
 8007600:	464b      	mov	r3, r9
 8007602:	aa03      	add	r2, sp, #12
 8007604:	4621      	mov	r1, r4
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff fee2 	bl	80073d0 <_printf_common>
 800760c:	3001      	adds	r0, #1
 800760e:	d14c      	bne.n	80076aa <_printf_i+0x1fe>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	b004      	add	sp, #16
 8007616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761a:	4835      	ldr	r0, [pc, #212]	; (80076f0 <_printf_i+0x244>)
 800761c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007620:	6829      	ldr	r1, [r5, #0]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	f851 6b04 	ldr.w	r6, [r1], #4
 8007628:	6029      	str	r1, [r5, #0]
 800762a:	061d      	lsls	r5, r3, #24
 800762c:	d514      	bpl.n	8007658 <_printf_i+0x1ac>
 800762e:	07df      	lsls	r7, r3, #31
 8007630:	bf44      	itt	mi
 8007632:	f043 0320 	orrmi.w	r3, r3, #32
 8007636:	6023      	strmi	r3, [r4, #0]
 8007638:	b91e      	cbnz	r6, 8007642 <_printf_i+0x196>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f023 0320 	bic.w	r3, r3, #32
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	2310      	movs	r3, #16
 8007644:	e7b0      	b.n	80075a8 <_printf_i+0xfc>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	f043 0320 	orr.w	r3, r3, #32
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	2378      	movs	r3, #120	; 0x78
 8007650:	4828      	ldr	r0, [pc, #160]	; (80076f4 <_printf_i+0x248>)
 8007652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007656:	e7e3      	b.n	8007620 <_printf_i+0x174>
 8007658:	0659      	lsls	r1, r3, #25
 800765a:	bf48      	it	mi
 800765c:	b2b6      	uxthmi	r6, r6
 800765e:	e7e6      	b.n	800762e <_printf_i+0x182>
 8007660:	4615      	mov	r5, r2
 8007662:	e7bb      	b.n	80075dc <_printf_i+0x130>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	6826      	ldr	r6, [r4, #0]
 8007668:	6961      	ldr	r1, [r4, #20]
 800766a:	1d18      	adds	r0, r3, #4
 800766c:	6028      	str	r0, [r5, #0]
 800766e:	0635      	lsls	r5, r6, #24
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	d501      	bpl.n	8007678 <_printf_i+0x1cc>
 8007674:	6019      	str	r1, [r3, #0]
 8007676:	e002      	b.n	800767e <_printf_i+0x1d2>
 8007678:	0670      	lsls	r0, r6, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0x1c8>
 800767c:	8019      	strh	r1, [r3, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	6123      	str	r3, [r4, #16]
 8007682:	4615      	mov	r5, r2
 8007684:	e7ba      	b.n	80075fc <_printf_i+0x150>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	1d1a      	adds	r2, r3, #4
 800768a:	602a      	str	r2, [r5, #0]
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	6862      	ldr	r2, [r4, #4]
 8007690:	2100      	movs	r1, #0
 8007692:	4628      	mov	r0, r5
 8007694:	f7f8 fdcc 	bl	8000230 <memchr>
 8007698:	b108      	cbz	r0, 800769e <_printf_i+0x1f2>
 800769a:	1b40      	subs	r0, r0, r5
 800769c:	6060      	str	r0, [r4, #4]
 800769e:	6863      	ldr	r3, [r4, #4]
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	2300      	movs	r3, #0
 80076a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a8:	e7a8      	b.n	80075fc <_printf_i+0x150>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	462a      	mov	r2, r5
 80076ae:	4649      	mov	r1, r9
 80076b0:	4640      	mov	r0, r8
 80076b2:	47d0      	blx	sl
 80076b4:	3001      	adds	r0, #1
 80076b6:	d0ab      	beq.n	8007610 <_printf_i+0x164>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	079b      	lsls	r3, r3, #30
 80076bc:	d413      	bmi.n	80076e6 <_printf_i+0x23a>
 80076be:	68e0      	ldr	r0, [r4, #12]
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	4298      	cmp	r0, r3
 80076c4:	bfb8      	it	lt
 80076c6:	4618      	movlt	r0, r3
 80076c8:	e7a4      	b.n	8007614 <_printf_i+0x168>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4632      	mov	r2, r6
 80076ce:	4649      	mov	r1, r9
 80076d0:	4640      	mov	r0, r8
 80076d2:	47d0      	blx	sl
 80076d4:	3001      	adds	r0, #1
 80076d6:	d09b      	beq.n	8007610 <_printf_i+0x164>
 80076d8:	3501      	adds	r5, #1
 80076da:	68e3      	ldr	r3, [r4, #12]
 80076dc:	9903      	ldr	r1, [sp, #12]
 80076de:	1a5b      	subs	r3, r3, r1
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	dcf2      	bgt.n	80076ca <_printf_i+0x21e>
 80076e4:	e7eb      	b.n	80076be <_printf_i+0x212>
 80076e6:	2500      	movs	r5, #0
 80076e8:	f104 0619 	add.w	r6, r4, #25
 80076ec:	e7f5      	b.n	80076da <_printf_i+0x22e>
 80076ee:	bf00      	nop
 80076f0:	08007a65 	.word	0x08007a65
 80076f4:	08007a76 	.word	0x08007a76

080076f8 <memcpy>:
 80076f8:	440a      	add	r2, r1
 80076fa:	4291      	cmp	r1, r2
 80076fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007700:	d100      	bne.n	8007704 <memcpy+0xc>
 8007702:	4770      	bx	lr
 8007704:	b510      	push	{r4, lr}
 8007706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800770a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800770e:	4291      	cmp	r1, r2
 8007710:	d1f9      	bne.n	8007706 <memcpy+0xe>
 8007712:	bd10      	pop	{r4, pc}

08007714 <memmove>:
 8007714:	4288      	cmp	r0, r1
 8007716:	b510      	push	{r4, lr}
 8007718:	eb01 0402 	add.w	r4, r1, r2
 800771c:	d902      	bls.n	8007724 <memmove+0x10>
 800771e:	4284      	cmp	r4, r0
 8007720:	4623      	mov	r3, r4
 8007722:	d807      	bhi.n	8007734 <memmove+0x20>
 8007724:	1e43      	subs	r3, r0, #1
 8007726:	42a1      	cmp	r1, r4
 8007728:	d008      	beq.n	800773c <memmove+0x28>
 800772a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800772e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007732:	e7f8      	b.n	8007726 <memmove+0x12>
 8007734:	4402      	add	r2, r0
 8007736:	4601      	mov	r1, r0
 8007738:	428a      	cmp	r2, r1
 800773a:	d100      	bne.n	800773e <memmove+0x2a>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007746:	e7f7      	b.n	8007738 <memmove+0x24>

08007748 <_free_r>:
 8007748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800774a:	2900      	cmp	r1, #0
 800774c:	d044      	beq.n	80077d8 <_free_r+0x90>
 800774e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007752:	9001      	str	r0, [sp, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f1a1 0404 	sub.w	r4, r1, #4
 800775a:	bfb8      	it	lt
 800775c:	18e4      	addlt	r4, r4, r3
 800775e:	f000 f913 	bl	8007988 <__malloc_lock>
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <_free_r+0x94>)
 8007764:	9801      	ldr	r0, [sp, #4]
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	b933      	cbnz	r3, 8007778 <_free_r+0x30>
 800776a:	6063      	str	r3, [r4, #4]
 800776c:	6014      	str	r4, [r2, #0]
 800776e:	b003      	add	sp, #12
 8007770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007774:	f000 b90e 	b.w	8007994 <__malloc_unlock>
 8007778:	42a3      	cmp	r3, r4
 800777a:	d908      	bls.n	800778e <_free_r+0x46>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf01      	itttt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	1949      	addeq	r1, r1, r5
 800778a:	6021      	streq	r1, [r4, #0]
 800778c:	e7ed      	b.n	800776a <_free_r+0x22>
 800778e:	461a      	mov	r2, r3
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	b10b      	cbz	r3, 8007798 <_free_r+0x50>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d9fa      	bls.n	800778e <_free_r+0x46>
 8007798:	6811      	ldr	r1, [r2, #0]
 800779a:	1855      	adds	r5, r2, r1
 800779c:	42a5      	cmp	r5, r4
 800779e:	d10b      	bne.n	80077b8 <_free_r+0x70>
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	4421      	add	r1, r4
 80077a4:	1854      	adds	r4, r2, r1
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	d1e0      	bne.n	800776e <_free_r+0x26>
 80077ac:	681c      	ldr	r4, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	6053      	str	r3, [r2, #4]
 80077b2:	4421      	add	r1, r4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	e7da      	b.n	800776e <_free_r+0x26>
 80077b8:	d902      	bls.n	80077c0 <_free_r+0x78>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7d6      	b.n	800776e <_free_r+0x26>
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	1961      	adds	r1, r4, r5
 80077c4:	428b      	cmp	r3, r1
 80077c6:	bf04      	itt	eq
 80077c8:	6819      	ldreq	r1, [r3, #0]
 80077ca:	685b      	ldreq	r3, [r3, #4]
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	bf04      	itt	eq
 80077d0:	1949      	addeq	r1, r1, r5
 80077d2:	6021      	streq	r1, [r4, #0]
 80077d4:	6054      	str	r4, [r2, #4]
 80077d6:	e7ca      	b.n	800776e <_free_r+0x26>
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	200002d8 	.word	0x200002d8

080077e0 <sbrk_aligned>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4e0e      	ldr	r6, [pc, #56]	; (800781c <sbrk_aligned+0x3c>)
 80077e4:	460c      	mov	r4, r1
 80077e6:	6831      	ldr	r1, [r6, #0]
 80077e8:	4605      	mov	r5, r0
 80077ea:	b911      	cbnz	r1, 80077f2 <sbrk_aligned+0x12>
 80077ec:	f000 f8bc 	bl	8007968 <_sbrk_r>
 80077f0:	6030      	str	r0, [r6, #0]
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 f8b7 	bl	8007968 <_sbrk_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d00a      	beq.n	8007814 <sbrk_aligned+0x34>
 80077fe:	1cc4      	adds	r4, r0, #3
 8007800:	f024 0403 	bic.w	r4, r4, #3
 8007804:	42a0      	cmp	r0, r4
 8007806:	d007      	beq.n	8007818 <sbrk_aligned+0x38>
 8007808:	1a21      	subs	r1, r4, r0
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f8ac 	bl	8007968 <_sbrk_r>
 8007810:	3001      	adds	r0, #1
 8007812:	d101      	bne.n	8007818 <sbrk_aligned+0x38>
 8007814:	f04f 34ff 	mov.w	r4, #4294967295
 8007818:	4620      	mov	r0, r4
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	200002dc 	.word	0x200002dc

08007820 <_malloc_r>:
 8007820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	1ccd      	adds	r5, r1, #3
 8007826:	f025 0503 	bic.w	r5, r5, #3
 800782a:	3508      	adds	r5, #8
 800782c:	2d0c      	cmp	r5, #12
 800782e:	bf38      	it	cc
 8007830:	250c      	movcc	r5, #12
 8007832:	2d00      	cmp	r5, #0
 8007834:	4607      	mov	r7, r0
 8007836:	db01      	blt.n	800783c <_malloc_r+0x1c>
 8007838:	42a9      	cmp	r1, r5
 800783a:	d905      	bls.n	8007848 <_malloc_r+0x28>
 800783c:	230c      	movs	r3, #12
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	2600      	movs	r6, #0
 8007842:	4630      	mov	r0, r6
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	4e2e      	ldr	r6, [pc, #184]	; (8007904 <_malloc_r+0xe4>)
 800784a:	f000 f89d 	bl	8007988 <__malloc_lock>
 800784e:	6833      	ldr	r3, [r6, #0]
 8007850:	461c      	mov	r4, r3
 8007852:	bb34      	cbnz	r4, 80078a2 <_malloc_r+0x82>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ffc2 	bl	80077e0 <sbrk_aligned>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	4604      	mov	r4, r0
 8007860:	d14d      	bne.n	80078fe <_malloc_r+0xde>
 8007862:	6834      	ldr	r4, [r6, #0]
 8007864:	4626      	mov	r6, r4
 8007866:	2e00      	cmp	r6, #0
 8007868:	d140      	bne.n	80078ec <_malloc_r+0xcc>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	4631      	mov	r1, r6
 800786e:	4638      	mov	r0, r7
 8007870:	eb04 0803 	add.w	r8, r4, r3
 8007874:	f000 f878 	bl	8007968 <_sbrk_r>
 8007878:	4580      	cmp	r8, r0
 800787a:	d13a      	bne.n	80078f2 <_malloc_r+0xd2>
 800787c:	6821      	ldr	r1, [r4, #0]
 800787e:	3503      	adds	r5, #3
 8007880:	1a6d      	subs	r5, r5, r1
 8007882:	f025 0503 	bic.w	r5, r5, #3
 8007886:	3508      	adds	r5, #8
 8007888:	2d0c      	cmp	r5, #12
 800788a:	bf38      	it	cc
 800788c:	250c      	movcc	r5, #12
 800788e:	4629      	mov	r1, r5
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ffa5 	bl	80077e0 <sbrk_aligned>
 8007896:	3001      	adds	r0, #1
 8007898:	d02b      	beq.n	80078f2 <_malloc_r+0xd2>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	442b      	add	r3, r5
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	e00e      	b.n	80078c0 <_malloc_r+0xa0>
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	1b52      	subs	r2, r2, r5
 80078a6:	d41e      	bmi.n	80078e6 <_malloc_r+0xc6>
 80078a8:	2a0b      	cmp	r2, #11
 80078aa:	d916      	bls.n	80078da <_malloc_r+0xba>
 80078ac:	1961      	adds	r1, r4, r5
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	6025      	str	r5, [r4, #0]
 80078b2:	bf18      	it	ne
 80078b4:	6059      	strne	r1, [r3, #4]
 80078b6:	6863      	ldr	r3, [r4, #4]
 80078b8:	bf08      	it	eq
 80078ba:	6031      	streq	r1, [r6, #0]
 80078bc:	5162      	str	r2, [r4, r5]
 80078be:	604b      	str	r3, [r1, #4]
 80078c0:	4638      	mov	r0, r7
 80078c2:	f104 060b 	add.w	r6, r4, #11
 80078c6:	f000 f865 	bl	8007994 <__malloc_unlock>
 80078ca:	f026 0607 	bic.w	r6, r6, #7
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	1af2      	subs	r2, r6, r3
 80078d2:	d0b6      	beq.n	8007842 <_malloc_r+0x22>
 80078d4:	1b9b      	subs	r3, r3, r6
 80078d6:	50a3      	str	r3, [r4, r2]
 80078d8:	e7b3      	b.n	8007842 <_malloc_r+0x22>
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	bf0c      	ite	eq
 80078e0:	6032      	streq	r2, [r6, #0]
 80078e2:	605a      	strne	r2, [r3, #4]
 80078e4:	e7ec      	b.n	80078c0 <_malloc_r+0xa0>
 80078e6:	4623      	mov	r3, r4
 80078e8:	6864      	ldr	r4, [r4, #4]
 80078ea:	e7b2      	b.n	8007852 <_malloc_r+0x32>
 80078ec:	4634      	mov	r4, r6
 80078ee:	6876      	ldr	r6, [r6, #4]
 80078f0:	e7b9      	b.n	8007866 <_malloc_r+0x46>
 80078f2:	230c      	movs	r3, #12
 80078f4:	603b      	str	r3, [r7, #0]
 80078f6:	4638      	mov	r0, r7
 80078f8:	f000 f84c 	bl	8007994 <__malloc_unlock>
 80078fc:	e7a1      	b.n	8007842 <_malloc_r+0x22>
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	e7de      	b.n	80078c0 <_malloc_r+0xa0>
 8007902:	bf00      	nop
 8007904:	200002d8 	.word	0x200002d8

08007908 <_realloc_r>:
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790c:	4680      	mov	r8, r0
 800790e:	4614      	mov	r4, r2
 8007910:	460e      	mov	r6, r1
 8007912:	b921      	cbnz	r1, 800791e <_realloc_r+0x16>
 8007914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	4611      	mov	r1, r2
 800791a:	f7ff bf81 	b.w	8007820 <_malloc_r>
 800791e:	b92a      	cbnz	r2, 800792c <_realloc_r+0x24>
 8007920:	f7ff ff12 	bl	8007748 <_free_r>
 8007924:	4625      	mov	r5, r4
 8007926:	4628      	mov	r0, r5
 8007928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800792c:	f000 f838 	bl	80079a0 <_malloc_usable_size_r>
 8007930:	4284      	cmp	r4, r0
 8007932:	4607      	mov	r7, r0
 8007934:	d802      	bhi.n	800793c <_realloc_r+0x34>
 8007936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800793a:	d812      	bhi.n	8007962 <_realloc_r+0x5a>
 800793c:	4621      	mov	r1, r4
 800793e:	4640      	mov	r0, r8
 8007940:	f7ff ff6e 	bl	8007820 <_malloc_r>
 8007944:	4605      	mov	r5, r0
 8007946:	2800      	cmp	r0, #0
 8007948:	d0ed      	beq.n	8007926 <_realloc_r+0x1e>
 800794a:	42bc      	cmp	r4, r7
 800794c:	4622      	mov	r2, r4
 800794e:	4631      	mov	r1, r6
 8007950:	bf28      	it	cs
 8007952:	463a      	movcs	r2, r7
 8007954:	f7ff fed0 	bl	80076f8 <memcpy>
 8007958:	4631      	mov	r1, r6
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff fef4 	bl	8007748 <_free_r>
 8007960:	e7e1      	b.n	8007926 <_realloc_r+0x1e>
 8007962:	4635      	mov	r5, r6
 8007964:	e7df      	b.n	8007926 <_realloc_r+0x1e>
	...

08007968 <_sbrk_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d06      	ldr	r5, [pc, #24]	; (8007984 <_sbrk_r+0x1c>)
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	f7fa f964 	bl	8001c40 <_sbrk>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_sbrk_r+0x1a>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_sbrk_r+0x1a>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	200002e0 	.word	0x200002e0

08007988 <__malloc_lock>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__malloc_lock+0x8>)
 800798a:	f000 b811 	b.w	80079b0 <__retarget_lock_acquire_recursive>
 800798e:	bf00      	nop
 8007990:	200002e4 	.word	0x200002e4

08007994 <__malloc_unlock>:
 8007994:	4801      	ldr	r0, [pc, #4]	; (800799c <__malloc_unlock+0x8>)
 8007996:	f000 b80c 	b.w	80079b2 <__retarget_lock_release_recursive>
 800799a:	bf00      	nop
 800799c:	200002e4 	.word	0x200002e4

080079a0 <_malloc_usable_size_r>:
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f18      	subs	r0, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfbc      	itt	lt
 80079aa:	580b      	ldrlt	r3, [r1, r0]
 80079ac:	18c0      	addlt	r0, r0, r3
 80079ae:	4770      	bx	lr

080079b0 <__retarget_lock_acquire_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <__retarget_lock_release_recursive>:
 80079b2:	4770      	bx	lr

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
